{"version":3,"sources":["Project.js"],"names":["EXPO_CDN","MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","promisify","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","let","_cachedSignedManifest","CachedSignedManifest","manifestString","signedManifest","async","currentStatus","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","freeportAsync","_getForPlatformAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_resolveGoogleServicesFile","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","ios","_resolveManifestAssets","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_requireFromProject","modulePath","exp","fullPath","ConfigUtils","resolveModule","decache","require","getSlugAsync","options","Object","pkg","readConfigJsonAsync","configName","configFilenameAsync","slug","name","getLatestReleaseAsync","formData","FormData","append","releaseChannel","queryResult","Api","callMethodAsync","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","exportForAppHosting","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","HashIds","uuid","v1","revisionId","encode","now","developer","tool","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","bundleUrl","urljoin","dependencies","keys","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","_saveAssetAsync","paths","files","fileHashes","keyChunks","chunk","key","logDebug","quiet","assetPath","p","findReusableBuildAsync","user","getCurrentUserAsync","buildReuseStatus","ApiV2","clientForUser","postAsync","publishAsync","ensureLoggedInAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","postPublish","hook","file","fn","_fn","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","config","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","sourceMapUrl","constructSourceMapUrlAsync","_collectAssets","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_configureExpForAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","assetCdnPath","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","getConfigAsync","configPrefix","ThirdParty","getManifest","buildAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","_waitForRunningAsync","retries","test","delayAsync","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","DEBUG","obj","logWithLevel","tag","groupDepth","shouldHide","includesStack","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","assetExts","sourceExts","nonPersistent","Versions","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","uniq","undefined","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","setEncoding","stderr","pipe","split","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","shouldExposeEnvironmentVariableInManifest","has","toUpperCase","startExpoServerAsync","stopExpoServerAsync","app","express","use","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","serverDriver","serverOS","os","serverOSVersion","release","send","post","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","number","configPath","dotExpoHomeDirectory","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","integer","getUrlAsync","optimizeAsync","chalk","green","assetJson","assetInfo","readAssetJsonAsync","outdated","fileHash","totalSaved","allFiles","selectedFiles","getAssetFilesAsync","hashes","image","calculateHash","delete","outdatedHash","quality","include","exclude","save","images","prevSize","statSync","newName","createNewFilename","optimizedImage","optimizeImageAsync","newSize","amountSaved","move","gray","newHash","unlinkSync","prettyBytes","writeAsync","startAsync","webOnly","Webpack","DevSession","startSession","_stopInternalAsync","stopSession","hasWebSupport","hasWebSupportAsync","stopAsync","setTimeout","webpackServerPort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AA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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport JsonFile from '@expo/json-file';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport prettyBytes from 'pretty-bytes';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as ConfigUtils from '@expo/config';\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport {\n  readAssetJsonAsync,\n  getAssetFilesAsync,\n  optimizeImageAsync,\n  calculateHash,\n  createNewFilename,\n} from './AssetUtils';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\nimport type { User as ExpUser } from './User'; //eslint-disable-line\nimport * as Webpack from './Webpack';\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n  if (manifest.ios && manifest.ios.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.ios.googleServicesFile),\n      'base64'\n    );\n    manifest.ios.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(\n      manifest.sdkVersion\n    )).filter(({ fieldPath }) => get(manifest, fieldPath));\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${e.manifestField}\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot, exp) {\n  try {\n    let fullPath = ConfigUtils.resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n) {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes = [];\n  const iosIndexes = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath, accumulator) => {\n      const index = await JsonFile.readAsync(indexPath);\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = indexes => {\n    return indexes.sort((index1, index2) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${index1.sdkVersion}. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify({ ...exp, dependencies: Object.keys(pkg.dependencies) })\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string, canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${androidManifest.bundleUrl}\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options, pkg }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ConfigUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'ios' || options.platform === 'all')) {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'android' || options.platform === 'all')) {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(projectRoot, url, retries = 300) {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body) {\n  return body.length === 1 && /^Running application \"main\" with appParams:/.test(body[0]);\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: ConfigUtils.resolveModule('expo/tools/LogReporter', projectRoot, exp),\n    assetExts: ['ttf'],\n    sourceExts: ['expo.js', 'expo.ts', 'expo.tsx', 'expo.json', 'js', 'json', 'ts', 'tsx'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    packagerOpts.assetPlugins = ConfigUtils.resolveModule(\n      'expo/tools/hashAssetFiles',\n      projectRoot,\n      exp\n    );\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ConfigUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function optimizeAsync(projectRoot: string = './', options: Object = {}) {\n  logger.global.info(chalk.green('Optimizing assets...'));\n\n  const { assetJson, assetInfo } = await readAssetJsonAsync(projectRoot);\n  // Keep track of which hash values in assets.json are no longer in use\n  const outdated = new Set();\n  for (const fileHash in assetInfo) outdated.add(fileHash);\n\n  let totalSaved = 0;\n  const { allFiles, selectedFiles } = await getAssetFilesAsync(projectRoot, options);\n  const hashes = {};\n  // Remove assets that have been deleted/modified from assets.json\n  allFiles.forEach(image => {\n    const hash = calculateHash(image);\n    if (assetInfo[hash]) {\n      outdated.delete(hash);\n    }\n    hashes[image] = hash;\n  });\n  outdated.forEach(outdatedHash => {\n    delete assetInfo[outdatedHash];\n  });\n\n  const { quality, include, exclude, save } = options;\n\n  const images = include || exclude ? selectedFiles : allFiles;\n  for (const image of images) {\n    const hash = hashes[image];\n    if (assetInfo[hash]) {\n      continue;\n    }\n    const { size: prevSize } = fs.statSync(image);\n\n    const newName = createNewFilename(image);\n    const optimizedImage = await optimizeImageAsync(image, quality);\n\n    const { size: newSize } = fs.statSync(optimizedImage);\n    const amountSaved = prevSize - newSize;\n    if (amountSaved > 0) {\n      await fs.move(image, newName);\n      await fs.move(optimizedImage, image);\n    } else {\n      assetInfo[hash] = true;\n      logger.global.info(\n        chalk.gray(\n          amountSaved === 0\n            ? `Compressed version of ${image} same size as original. Using original instead.`\n            : `Compressed version of ${image} was larger than original. Using original instead.`\n        )\n      );\n      continue;\n    }\n    // Recalculate hash since the image has changed\n    const newHash = calculateHash(image);\n    assetInfo[newHash] = true;\n\n    if (save) {\n      if (hash === newHash) {\n        logger.global.info(\n          chalk.gray(\n            `Compressed asset ${image} is identical to the original. Using original instead.`\n          )\n        );\n        fs.unlinkSync(newName);\n      } else {\n        logger.global.info(chalk.gray(`Saving original asset to ${newName}`));\n        // Save the old hash to prevent reoptimizing\n        assetInfo[hash] = true;\n      }\n    } else {\n      // Delete the renamed original asset\n      fs.unlinkSync(newName);\n    }\n    if (amountSaved) {\n      totalSaved += amountSaved;\n      logger.global.info(`Saved ${prettyBytes(amountSaved)}`);\n    } else {\n      logger.global.info(chalk.gray(`Nothing to compress.`));\n    }\n  }\n  if (totalSaved === 0) {\n    logger.global.info('No assets optimized. Everything is fully compressed!');\n  } else {\n    logger.global.info(\n      `Finished compressing assets. ${chalk.green(prettyBytes(totalSaved))} saved.`\n    );\n  }\n  assetJson.writeAsync(assetInfo);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  const hasWebSupport = await Doctor.hasWebSupportAsync(projectRoot);\n  if (hasWebSupport) {\n    await Webpack.stopAsync(projectRoot);\n  }\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"sourceRoot":"/@expo/xdl@56.2.1/src"}