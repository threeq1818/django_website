{"version":3,"sources":["Simulator.ts"],"names":["_lastUrl","SUGGESTED_XCODE_VERSION","XCODE_NOT_INSTALLED_ERROR","isPlatformSupported","process","platform","_isLicenseOutOfDate","text","lower","toLowerCase","includes","_xcrunAsync","args","e","stdout","stderr","XDLError","Logger","global","error","join","_isSimulatorInstalledAsync","result","osascript","execAsync","trim","console","warn","matches","match","version","semver","valid","lt","isXDLError","toString","_openAndBootSimulatorAsync","_isSimulatorRunningAsync","info","_waitForDeviceToBoot","bootedDevice","_bootedSimulatorDeviceAsync","_bootDefaultSimulatorDeviceAsync","zeroMeansNo","deviceUDID","_getDefaultSimulatorDeviceUDIDAsync","_getFirstAvailableDeviceAsync","udid","defaultDeviceUDID","simulatorDeviceInfo","_listSimulatorDevicesAsync","devices","iOSRuntimesNewestToOldest","Object","keys","filter","runtime","reverse","i","length","device","isAvailable","name","Error","JSON","parse","start","Date","now","state","_dirForSimulatorDevice","path","resolve","os","homedir","_quitSimulatorAsync","_isExpoAppInstalledOnCurrentBootedSimulatorAsync","simDir","cwd","_waitForExpoAppInstalledOnCurrentBootedSimulatorAsync","_expoVersionOnCurrentBootedSimulatorAsync","regex","regexMatch","exec","_checkExpoUpToDateAsync","versions","Versions","versionsAsync","installedVersion","iosVersion","notifications","code","NotificationCode","OLD_IOS_APP_VERSION","_downloadSimulatorAppAsync","url","dir","_simulatorCacheDirectory","Api","downloadAsync","extract","fs","pathExists","filesInDir","readdir","removeSync","mkdirpSync","iosUrl","_installExpoOnSimulatorAsync","START_LOADING","STOP_LOADING","_uninstallExpoAppFromSimulatorAsync","message","dotExpoHomeDirectory","UserSettings","upgradeExpoAsync","installResult","status","_openUrlInSimulatorAsync","openUrlInSimulatorSafeAsync","isDetached","success","msg","Analytics","logEvent","openProjectAsync","projectRoot","projectUrl","UrlUtils","constructManifestUrlAsync","hostType","exp","ConfigUtils","readConfigJsonAsync"],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport * as ConfigUtils from '@expo/config';\nimport delayAsync from 'delay-async';\nimport glob from 'glob-promise';\nimport * as osascript from '@expo/osascript';\nimport semver from 'semver';\nimport spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport * as UrlUtils from './UrlUtils';\n\nlet _lastUrl: string | null = null;\n\nconst SUGGESTED_XCODE_VERSION = `8.2.0`;\nconst XCODE_NOT_INSTALLED_ERROR =\n  'Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator. If you already have the latest version of Xcode installed, you may have to run the command `sudo xcode-select -s /Applications/Xcode.app`.';\n\nexport function isPlatformSupported() {\n  return process.platform === 'darwin';\n}\n\nfunction _isLicenseOutOfDate(text: string) {\n  if (!text) {\n    return false;\n  }\n\n  let lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nasync function _xcrunAsync(args: string[]) {\n  try {\n    return await spawnAsync('xcrun', args);\n  } catch (e) {\n    if (_isLicenseOutOfDate(e.stdout) || _isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        'XCODE_LICENSE_NOT_ACCEPTED',\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    } else {\n      Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr}`);\n      throw e;\n    }\n  }\n}\n\n// Simulator installed\nexport async function _isSimulatorInstalledAsync() {\n  let result;\n  try {\n    result = (await osascript.execAsync('id of app \"Simulator\"')).trim();\n  } catch (e) {\n    console.error(\n      \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine\",\n      e\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n  if (\n    result !== 'com.apple.iphonesimulator' &&\n    result !== 'com.apple.CoreSimulator.SimulatorTrampoline'\n  ) {\n    console.warn(\n      \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\"\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // check xcode version\n  try {\n    const { stdout } = await spawnAsync('xcodebuild', ['-version']);\n\n    // find something that looks like a dot separated version number\n    let matches = stdout.match(/[\\d]{1,2}\\.[\\d]{1,3}/);\n    if (!matches) {\n      // very unlikely\n      console.error('No version number found from `xcodebuild -version`.');\n      Logger.global.error(\n        'Unable to check Xcode version. Command ran successfully but no version number was found.'\n      );\n      return false;\n    }\n\n    // we're cheating to use the semver lib, but it expects a proper patch version which xcode doesn't have\n    const version = matches[0] + '.0';\n\n    if (!semver.valid(version)) {\n      console.error('Invalid version number found: ' + matches[0]);\n      return false;\n    }\n\n    if (semver.lt(version, SUGGESTED_XCODE_VERSION)) {\n      console.warn(\n        `Found Xcode ${version}, which is older than the recommended Xcode ${SUGGESTED_XCODE_VERSION}.`\n      );\n    }\n  } catch (e) {\n    // how would this happen? presumably if Simulator id is found then xcodebuild is installed\n    console.error(`Unable to check Xcode version: ${e}`);\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // make sure we can run simctl\n  try {\n    await _xcrunAsync(['simctl', 'help']);\n  } catch (e) {\n    if (e.isXDLError) {\n      Logger.global.error(e.toString());\n    } else {\n      console.warn(`Unable to run simctl: ${e.toString()}`);\n      Logger.global.error(\n        'xcrun may not be configured correctly. Try running `sudo xcode-select --reset` and running this again.'\n      );\n    }\n    return false;\n  }\n\n  return true;\n}\n\n// Simulator opened\nexport async function _openAndBootSimulatorAsync() {\n  if (!await _isSimulatorRunningAsync()) {\n    Logger.global.info('Opening iOS simulator');\n    await spawnAsync('open', ['-a', 'Simulator']);\n    await _waitForDeviceToBoot();\n  } else {\n    let bootedDevice = await _bootedSimulatorDeviceAsync();\n    if (!bootedDevice) {\n      await _bootDefaultSimulatorDeviceAsync();\n    }\n  }\n}\n\nexport async function _isSimulatorRunningAsync() {\n  let zeroMeansNo = (await osascript.execAsync(\n    'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n  )).trim();\n  if (zeroMeansNo === '0') {\n    return false;\n  }\n\n  return true;\n}\n\nasync function _bootDefaultSimulatorDeviceAsync() {\n  Logger.global.info(`Booting device in iOS simulator...`);\n  try {\n    let deviceUDID = await _getDefaultSimulatorDeviceUDIDAsync();\n    if (!deviceUDID) {\n      deviceUDID = (await _getFirstAvailableDeviceAsync()).udid;\n    }\n    return await _xcrunAsync(['simctl', 'boot', deviceUDID]);\n  } catch (e) {\n    Logger.global.error(\n      `There was a problem booting a device in iOS Simulator. Quit Simulator, and try again.`\n    );\n    throw e;\n  }\n}\n\nasync function _getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function _getFirstAvailableDeviceAsync() {\n  const simulatorDeviceInfo = (await _listSimulatorDevicesAsync()).devices;\n  let iOSRuntimesNewestToOldest = Object.keys(simulatorDeviceInfo)\n    .filter(runtime => runtime.includes('iOS'))\n    .reverse();\n\n  const devices = simulatorDeviceInfo[iOSRuntimesNewestToOldest[0]];\n  for (let i = 0; i < devices.length; i++) {\n    const device = devices[i];\n    if (device.isAvailable && device.name.includes('iPhone')) {\n      return device;\n    }\n  }\n  throw new Error('No iPhone devices available in Simulator.');\n}\n\ntype SimulatorDevice = {\n  availability: string;\n  state: string;\n  isAvailable: boolean;\n  name: string;\n  udid: string;\n  availabilityError: string;\n};\ntype SimulatorDeviceList = {\n  devices: {\n    [runtime: string]: SimulatorDevice[];\n  };\n};\n\nasync function _listSimulatorDevicesAsync() {\n  const result = await _xcrunAsync(['simctl', 'list', 'devices', '--json']);\n  const info = JSON.parse(result.stdout) as SimulatorDeviceList;\n  return info;\n}\n\nasync function _waitForDeviceToBoot() {\n  let bootedDevice;\n  const start = Date.now();\n  do {\n    await delayAsync(100);\n    bootedDevice = await _bootedSimulatorDeviceAsync();\n    if (Date.now() - start > 10000) {\n      Logger.global.error(\n        `iOS Simulator device failed to boot. Try opening Simulator first, then running your app.`\n      );\n      throw new Error('Timed out waiting for iOS Simulator device to boot.');\n    }\n  } while (!bootedDevice);\n}\n\nasync function _bootedSimulatorDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n  return null;\n}\n\nexport function _dirForSimulatorDevice(udid: string) {\n  return path.resolve(os.homedir(), 'Library/Developer/CoreSimulator/Devices', udid);\n}\n\nexport async function _quitSimulatorAsync() {\n  return await osascript.execAsync('tell application \"Simulator\" to quit');\n}\n\n// Expo installed\nexport async function _isExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return false;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob(\n    './data/Containers/Data/Application/*/Library/Caches/Snapshots/host.exp.Exponent',\n    { cwd: simDir }\n  );\n\n  return matches.length > 0;\n}\n\nexport async function _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync(): Promise<boolean> {\n  if (await _isExpoAppInstalledOnCurrentBootedSimulatorAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n  }\n}\n\nexport async function _expoVersionOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return null;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob('./data/Containers/Bundle/Application/*/Exponent-*.app', {\n    cwd: simDir,\n  });\n\n  if (matches.length === 0) {\n    return null;\n  }\n\n  let regex = /Exponent-([0-9.]+)\\.app/;\n  let regexMatch = regex.exec(matches[0]);\n  if (!regexMatch) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nexport async function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionOnCurrentBootedSimulatorAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.iosVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_IOS_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nexport async function _downloadSimulatorAppAsync(url?: string) {\n  // If specific URL given just always download it and don't use cache\n  if (url) {\n    let dir = path.join(_simulatorCacheDirectory(), `Exponent-tmp.app`);\n    await Api.downloadAsync(url, dir, { extract: true });\n    return dir;\n  }\n\n  let versions = await Versions.versionsAsync();\n  let dir = path.join(_simulatorCacheDirectory(), `Exponent-${versions.iosVersion}.app`);\n\n  if (await fs.pathExists(dir)) {\n    let filesInDir = await fs.readdir(dir);\n    if (filesInDir.length > 0) {\n      return dir;\n    } else {\n      fs.removeSync(dir);\n    }\n  }\n\n  fs.mkdirpSync(dir);\n  try {\n    await Api.downloadAsync(versions.iosUrl, dir, { extract: true });\n  } catch (e) {\n    fs.removeSync(dir);\n    throw e;\n  }\n\n  return dir;\n}\n\n// url: Optional URL of Exponent.app tarball to download\nexport async function _installExpoOnSimulatorAsync(url?: string) {\n  Logger.global.info(`Downloading the latest version of Expo client app`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let dir = await _downloadSimulatorAppAsync(url);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info('Installing Expo client on iOS simulator');\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await _xcrunAsync(['simctl', 'install', 'booted', dir]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nexport async function _uninstallExpoAppFromSimulatorAsync() {\n  try {\n    Logger.global.info('Uninstalling Expo client from iOS simulator.');\n    await _xcrunAsync(['simctl', 'uninstall', 'booted', 'host.exp.Exponent']);\n  } catch (e) {\n    if (e.message && e.message.includes('No devices are booted.')) {\n      return;\n    } else {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport function _simulatorCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  if (!await _isSimulatorInstalledAsync()) {\n    return false;\n  }\n\n  await _openAndBootSimulatorAsync();\n  await _uninstallExpoAppFromSimulatorAsync();\n  let installResult = await _installExpoOnSimulatorAsync();\n  if (installResult.status !== 0) {\n    return false;\n  }\n\n  if (_lastUrl) {\n    Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n    await _xcrunAsync(['simctl', 'openurl', 'booted', _lastUrl]);\n    _lastUrl = null;\n  }\n\n  return true;\n}\n\n// Open Url\nexport async function _openUrlInSimulatorAsync(url: string) {\n  return await _xcrunAsync(['simctl', 'openurl', 'booted', url]);\n}\n\nexport async function openUrlInSimulatorSafeAsync(\n  url: string,\n  isDetached: boolean = false\n): Promise<{ success: true } | { success: false; msg: string }> {\n  if (!await _isSimulatorInstalledAsync()) {\n    return {\n      success: false,\n      msg: 'Unable to verify Xcode and Simulator installation.',\n    };\n  }\n\n  try {\n    await _openAndBootSimulatorAsync();\n\n    if (!isDetached && !await _isExpoAppInstalledOnCurrentBootedSimulatorAsync()) {\n      await _installExpoOnSimulatorAsync();\n      await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${url} in iOS simulator`);\n    await _openUrlInSimulatorAsync(url);\n  } catch (e) {\n    if (e.isXDLError) {\n      // Hit some internal error, don't try again.\n      // This includes Xcode license errors\n      Logger.global.error(e.message);\n      return {\n        success: false,\n        msg: `${e.toString()}`,\n      };\n    }\n\n    if (isDetached) {\n      Logger.global.error(\n        `Error running app. Have you installed the app already using Xcode? Since you are detached you must build manually. ${e.toString()}`\n      );\n    } else {\n      Logger.global.error(`Error installing or running app. ${e.toString()}`);\n    }\n\n    return {\n      success: false,\n      msg: `${e.toString()}`,\n    };\n  }\n\n  Analytics.logEvent('Open Url on Device', {\n    platform: 'ios',\n  });\n\n  return {\n    success: true,\n  };\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n    hostType: 'localhost',\n  });\n\n  let { exp } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n\n  let result = await openUrlInSimulatorSafeAsync(projectUrl, !!exp.isDetached);\n  if (result.success) {\n    return { success: true, url: projectUrl };\n  } else {\n    return { success: result.success, error: result.msg };\n  }\n}\n"],"file":"../Simulator.js","sourceRoot":"/@expo/xdl@56.2.1/src"}