{"version":3,"sources":["UrlUtils.ts"],"names":["constructBundleUrlAsync","projectRoot","opts","requestHostname","constructUrlAsync","constructManifestUrlAsync","constructHostUriAsync","urlString","urlObj","url","parse","protocol","slashes","format","constructLogUrlAsync","baseUrl","urlType","constructUrlWithExtensionAsync","entryPoint","ext","defaultOpts","dev","minify","bundleUrl","hostType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","encodeURIComponent","hasOwnProperty","strict","exp","ConfigUtils","readConfigJsonAsync","supportsAssetPlugins","Versions","gteSdkVersion","usesAssetPluginsQueryParam","lteSdkVersion","pluginModule","resolveModule","constructWebAppUrlAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","webpackServerPort","host","ip","address","https","readAsync","isPackager","schema","joi","object","keys","any","valid","lanType","boolean","optional","urlRandomness","string","allow","error","validate","XDLError","toString","getPackagerOptsAsync","Object","assign","detach","scheme","hostname","port","proxyURL","process","env","EXPO_PACKAGER_PROXY_URL","EXPO_MANIFEST_PROXY_URL","parsedProxyURL","packagerPort","expoServerPort","Config","offline","EXPO_PACKAGER_HOSTNAME","trim","REACT_NATIVE_PACKAGER_HOSTNAME","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","ProjectUtils","logWarning","clearNotification","pnu","url_","Error","replace","randomIdentifier","length","alphabet","result","i","j","Math","floor","random","c","substr","sevenDigitIdentifier","randomIdentifierForUser","username","someRandomness","join","domainify","s","toLowerCase","getPlatformSpecificBundleUrl","platform","includes","Exp","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","isHttps","validator","isURL","protocols"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,eAAeA,uBAAf,CACLC,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,SAAOC,iBAAiB,CAACH,WAAD,EAAcC,IAAd,EAAoB,IAApB,EAA0BC,eAA1B,CAAxB;AACD;;AAEM,eAAeE,yBAAf,CACLJ,WADK,EAELC,IAFK,EAGLC,eAHK,EAIL;AACA,SAAOC,iBAAiB,CAACH,WAAD,EAAcC,IAAd,EAAoB,KAApB,EAA2BC,eAA3B,CAAxB;AACD,C,CAED;;;AACO,eAAeG,qBAAf,CAAqCL,WAArC,EAA0DE,eAA1D,EAAoF;AACzF,MAAII,SAAS,GAAG,MAAMH,iBAAiB,CAACH,WAAD,EAAc,IAAd,EAAoB,KAApB,EAA2BE,eAA3B,CAAvC,CADyF,CAEzF;;AACA,MAAIK,MAAM,GAAGC,eAAIC,KAAJ,CAAUH,SAAV,CAAb;;AACAC,EAAAA,MAAM,CAACG,QAAP,GAAkB,EAAlB;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiB,KAAjB;AACA,SAAOH,eAAII,MAAJ,CAAWL,MAAX,CAAP;AACD;;AAEM,eAAeM,oBAAf,CAAoCb,WAApC,EAAyDE,eAAzD,EAAmF;AACxF,MAAIY,OAAO,GAAG,MAAMX,iBAAiB,CAACH,WAAD,EAAc;AAAEe,IAAAA,OAAO,EAAE;AAAX,GAAd,EAAmC,KAAnC,EAA0Cb,eAA1C,CAArC;AACA,SAAQ,GAAEY,OAAQ,OAAlB;AACD;;AAEM,eAAeE,8BAAf,CACLhB,WADK,EAELiB,UAFK,EAGLC,GAHK,EAILhB,eAJK,EAKLD,IALK,EAML;AACA,QAAMkB,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE,KADa;AAElBC,IAAAA,MAAM,EAAE;AAFU,GAApB;AAIApB,EAAAA,IAAI,GAAGA,IAAI,IAAIkB,WAAf;AACA,MAAIG,SAAS,GAAG,MAAMvB,uBAAuB,CAC3CC,WAD2C,EAE3C;AACEuB,IAAAA,QAAQ,EAAE,WADZ;AAEER,IAAAA,OAAO,EAAE;AAFX,GAF2C,EAM3Cb,eAN2C,CAA7C;AASA,MAAIsB,cAAc,GAAGC,mBAAmB,CAACR,UAAD,CAAxC;AACAK,EAAAA,SAAS,IAAK,IAAGE,cAAe,IAAGN,GAAI,EAAvC;AAEA,MAAIQ,WAAW,GAAG,MAAMC,+BAA+B,CAAC3B,WAAD,EAAcC,IAAd,CAAvD;AACA,SAAQ,GAAEqB,SAAU,IAAGI,WAAY,EAAnC;AACD;;AAEM,eAAeE,wBAAf,CACL5B,WADK,EAELiB,UAFK,EAGLf,eAHK,EAILD,IAJK,EAKL;AACA,SAAO,MAAMe,8BAA8B,CACzChB,WADyC,EAEzCiB,UAFyC,EAGzC,QAHyC,EAIzCf,eAJyC,EAKzCD,IALyC,CAA3C;AAOD;;AAEM,eAAe4B,0BAAf,CACL7B,WADK,EAELiB,UAFK,EAGLf,eAHK,EAIL;AACA,SAAO,MAAMc,8BAA8B,CAAChB,WAAD,EAAciB,UAAd,EAA0B,KAA1B,EAAiCf,eAAjC,CAA3C;AACD;;AAEM,eAAe4B,uBAAf,CACL9B,WADK,EAELiB,UAFK,EAGLf,eAHK,EAIL;AACA,SAAO,MAAMc,8BAA8B,CAAChB,WAAD,EAAciB,UAAd,EAA0B,QAA1B,EAAoCf,eAApC,CAA3C;AACD;;AAEM,eAAe6B,0BAAf,CAA0C/B,WAA1C,EAA+DE,eAA/D,EAAyF;AAC9F,SAAOC,iBAAiB,CACtBH,WADsB,EAEtB;AACEe,IAAAA,OAAO,EAAE;AADX,GAFsB,EAKtB,IALsB,EAMtBb,eANsB,CAAxB;AAQD;;AAEM,eAAeyB,+BAAf,CAA+C3B,WAA/C,EAAoEC,IAApE,EAA+E;AACpF,MAAIyB,WAAW,GAAI,OAAMM,kBAAkB,CAAC,CAAC,CAAC/B,IAAI,CAACmB,GAAR,CAAa,EAAxD;;AAEA,MAAInB,IAAI,CAACgC,cAAL,CAAoB,QAApB,CAAJ,EAAmC;AACjCP,IAAAA,WAAW,IAAK,WAAUM,kBAAkB,CAAC,CAAC,CAAC/B,IAAI,CAACiC,MAAR,CAAgB,EAA5D;AACD;;AAED,MAAIjC,IAAI,CAACgC,cAAL,CAAoB,QAApB,CAAJ,EAAmC;AACjCP,IAAAA,WAAW,IAAK,WAAUM,kBAAkB,CAAC,CAAC,CAAC/B,IAAI,CAACoB,MAAR,CAAgB,EAA5D;AACD;;AAEDK,EAAAA,WAAW,IAAI,YAAf;AAEA,MAAI;AAAES,IAAAA;AAAF,MAAU,MAAMC,WAAW,GAACC,mBAAZ,CAAgCrC,WAAhC,CAApB,CAboF,CAepF;AACA;;AACA,MAAIsC,oBAAoB,GAAGC,QAAQ,GAACC,aAAT,CAAuBL,GAAvB,EAA4B,QAA5B,CAA3B;AACA,MAAIM,0BAA0B,GAAGH,oBAAoB,IAAIC,QAAQ,GAACG,aAAT,CAAuBP,GAAvB,EAA4B,QAA5B,CAAzD;;AACA,MAAIM,0BAAJ,EAAgC;AAC9B;AACA,QAAIE,YAAY,GAAGP,WAAW,GAACQ,aAAZ,CAA0B,2BAA1B,EAAuD5C,WAAvD,EAAoEmC,GAApE,CAAnB;AACAT,IAAAA,WAAW,IAAK,gBAAeM,kBAAkB,CAACW,YAAD,CAAe,EAAhE;AACD,GAJD,MAIO,IAAI,CAACL,oBAAL,EAA2B;AAChC;AACA;AACA,QAAI,CAACA,oBAAL,EAA2B;AACzBZ,MAAAA,WAAW,IAAI,8BAAf;AACD;AACF;;AAED,SAAOA,WAAP;AACD;;AAEM,eAAemB,uBAAf,CAAuC7C,WAAvC,EAAoF;AACzF,MAAI8C,YAAY,GAAG,MAAMC,eAAe,GAACC,qBAAhB,CAAsChD,WAAtC,CAAzB;;AACA,MAAI,CAAC8C,YAAY,CAACG,iBAAlB,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,QAAMC,IAAI,GAAGC,cAAGC,OAAH,EAAb;;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAY,MAAMN,eAAe,GAACO,SAAhB,CAA0BtD,WAA1B,CAAxB;AACA,MAAIe,OAAO,GAAG,MAAd;;AACA,MAAIsC,KAAK,KAAK,IAAd,EAAoB;AAClBtC,IAAAA,OAAO,GAAG,OAAV;AACD;;AAED,SAAQ,GAAEA,OAAQ,MAAKmC,IAAK,IAAGJ,YAAY,CAACG,iBAAkB,EAA9D;AACD;;AAEM,eAAe9C,iBAAf,CACLH,WADK,EAELC,IAFK,EAGLsD,UAHK,EAILrD,eAJK,EAKY;AACjB,MAAID,IAAJ,EAAU;AACR,QAAIuD,MAAM,GAAGC,eAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7B5C,MAAAA,OAAO,EAAE0C,eAAIG,GAAJ,GAAUC,KAAV,CAAgB,KAAhB,EAAuB,MAAvB,EAA+B,UAA/B,EAA2C,aAA3C,CADoB;AAE7BC,MAAAA,OAAO,EAAEL,eAAIG,GAAJ,GAAUC,KAAV,CAAgB,IAAhB,EAAsB,UAAtB,CAFoB;AAG7BtC,MAAAA,QAAQ,EAAEkC,eAAIG,GAAJ,GAAUC,KAAV,CAAgB,WAAhB,EAA6B,KAA7B,EAAoC,QAApC,CAHmB;AAI7BzC,MAAAA,GAAG,EAAEqC,eAAIM,OAAJ,EAJwB;AAK7B7B,MAAAA,MAAM,EAAEuB,eAAIM,OAAJ,EALqB;AAM7B1C,MAAAA,MAAM,EAAEoC,eAAIM,OAAJ,EANqB;AAO7BV,MAAAA,KAAK,EAAEI,eAAIM,OAAJ,GAAcC,QAAd,EAPsB;AAQ7BC,MAAAA,aAAa,EAAER,eACZS,MADY,GAEZF,QAFY,GAGZG,KAHY,CAGN,IAHM;AARc,KAAlB,CAAb;;AAcA,UAAM;AAAEC,MAAAA;AAAF,QAAYX,eAAIY,QAAJ,CAAapE,IAAb,EAAmBuD,MAAnB,CAAlB;;AACA,QAAIY,KAAJ,EAAW;AACT,YAAM,KAAIE,mBAAJ,EAAa,iBAAb,EAAgCF,KAAK,CAACG,QAAN,EAAhC,CAAN;AACD;AACF;;AAED,MAAIpD,WAAW,GAAG,MAAM4B,eAAe,GAACyB,oBAAhB,CAAqCxE,WAArC,CAAxB;;AACA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAGkB,WAAP;AACD,GAFD,MAEO;AACLlB,IAAAA,IAAI,GAAGwE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBvD,WAAlB,EAA+BlB,IAA/B,CAAP;AACD;;AAED,MAAI6C,YAAY,GAAG,MAAMC,eAAe,GAACC,qBAAhB,CAAsChD,WAAtC,CAAzB;AAEA,MAAIU,QAAJ;;AACA,MAAIT,IAAI,CAACc,OAAL,KAAiB,MAArB,EAA6B;AAC3BL,IAAAA,QAAQ,GAAG,MAAX;AACD,GAFD,MAEO,IAAIT,IAAI,CAACc,OAAL,KAAiB,aAArB,EAAoC;AACzCL,IAAAA,QAAQ,GAAG,IAAX;AACD,GAFM,MAEA;AACLA,IAAAA,QAAQ,GAAG,KAAX;AAEA,QAAI;AAAEyB,MAAAA;AAAF,QAAU,MAAMC,WAAW,GAACC,mBAAZ,CAAgCrC,WAAhC,CAApB;;AACA,QAAImC,GAAG,CAACwC,MAAR,EAAgB;AACd,UAAIxC,GAAG,CAACyC,MAAJ,IAAcrC,QAAQ,GAACC,aAAT,CAAuBL,GAAvB,EAA4B,QAA5B,CAAlB,EAAyD;AACvDzB,QAAAA,QAAQ,GAAGyB,GAAG,CAACyC,MAAf;AACD,OAFD,MAEO,IAAIzC,GAAG,CAACwC,MAAJ,CAAWC,MAAf,EAAuB;AAC5B;AACA;AACAlE,QAAAA,QAAQ,GAAGyB,GAAG,CAACwC,MAAJ,CAAWC,MAAtB;AACD;AACF;AACF;;AAED,MAAIC,QAAJ;AACA,MAAIC,IAAJ;AAEA,QAAMC,QAAQ,GAAGxB,UAAU,GACvByB,OAAO,CAACC,GAAR,CAAYC,uBADW,GAEvBF,OAAO,CAACC,GAAR,CAAYE,uBAFhB;;AAGA,MAAIJ,QAAJ,EAAc;AACZ,UAAMK,cAAc,GAAG5E,eAAIC,KAAJ,CAAUsE,QAAV,CAAvB;;AACAF,IAAAA,QAAQ,GAAGO,cAAc,CAACP,QAA1B;AACAC,IAAAA,IAAI,GAAGM,cAAc,CAACN,IAAtB;;AACA,QAAIM,cAAc,CAAC1E,QAAf,KAA4B,QAAhC,EAA0C;AACxC,UAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvBA,QAAAA,QAAQ,GAAG,OAAX;AACD;;AACD,UAAI,CAACoE,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,KAAP;AACD;AACF;AACF,GAZD,MAYO,IAAI7E,IAAI,CAACsB,QAAL,KAAkB,WAAlB,IAAiCrB,eAAe,KAAK,WAAzD,EAAsE;AAC3E2E,IAAAA,QAAQ,GAAG,WAAX;AACAC,IAAAA,IAAI,GAAGvB,UAAU,GAAGT,YAAY,CAACuC,YAAhB,GAA+BvC,YAAY,CAACwC,cAA7D;AACD,GAHM,MAGA,IAAIrF,IAAI,CAACsB,QAAL,KAAkB,KAAlB,IAA2BgE,kBAAOC,OAAtC,EAA+C;AACpD,QAAIR,OAAO,CAACC,GAAR,CAAYQ,sBAAhB,EAAwC;AACtCZ,MAAAA,QAAQ,GAAGG,OAAO,CAACC,GAAR,CAAYQ,sBAAZ,CAAmCC,IAAnC,EAAX;AACD,KAFD,MAEO,IAAIV,OAAO,CAACC,GAAR,CAAYU,8BAAhB,EAAgD;AACrDd,MAAAA,QAAQ,GAAGG,OAAO,CAACC,GAAR,CAAYU,8BAAZ,CAA2CD,IAA3C,EAAX;AACD,KAFM,MAEA,IAAIzF,IAAI,CAAC6D,OAAL,KAAiB,IAArB,EAA2B;AAChC,UAAI5D,eAAJ,EAAqB;AACnB2E,QAAAA,QAAQ,GAAG3E,eAAX;AACD,OAFD,MAEO;AACL2E,QAAAA,QAAQ,GAAG1B,cAAGC,OAAH,EAAX;AACD;AACF,KANM,MAMA;AACL;AACAyB,MAAAA,QAAQ,GAAGe,cAAGf,QAAH,EAAX;AACD;;AACDC,IAAAA,IAAI,GAAGvB,UAAU,GAAGT,YAAY,CAACuC,YAAhB,GAA+BvC,YAAY,CAACwC,cAA7D;AACD,GAhBM,MAgBA;AACL,QAAIO,QAAQ,GAAGtC,UAAU,GAAGT,YAAY,CAACgD,gBAAhB,GAAmChD,YAAY,CAACiD,kBAAzE;;AACA,QAAI,CAACF,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAArC,EAA+C;AAC7CG,MAAAA,YAAY,GAACC,UAAb,CACEjG,WADF,EAEE,MAFF,EAGE,+CAHF,EAIE,sBAJF;AAMA,aAAOG,iBAAiB,CACtBH,WADsB,EAEtB,EAAE,GAAGC,IAAL;AAAWsB,QAAAA,QAAQ,EAAE;AAArB,OAFsB,EAGtBgC,UAHsB,EAItBrD,eAJsB,CAAxB;AAMD,KAbD,MAaO;AACL8F,MAAAA,YAAY,GAACE,iBAAb,CAA+BlG,WAA/B,EAA4C,sBAA5C;;AACA,UAAImG,GAAG,GAAG3F,eAAIC,KAAJ,CAAUoF,QAAV,CAAV;;AACAhB,MAAAA,QAAQ,GAAGsB,GAAG,CAACtB,QAAf;AACAC,MAAAA,IAAI,GAAGqB,GAAG,CAACrB,IAAX;AACD;AACF;;AAED,MAAIsB,IAAI,GAAG,EAAX;;AACA,MAAI1F,QAAJ,EAAc;AACZ0F,IAAAA,IAAI,IAAK,GAAE1F,QAAS,KAApB;AACD;;AAED,MAAI,CAACmE,QAAL,EAAe;AACb,UAAM,IAAIwB,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAEDD,EAAAA,IAAI,IAAIvB,QAAR;;AAEA,MAAIC,IAAJ,EAAU;AACRsB,IAAAA,IAAI,IAAK,IAAGtB,IAAK,EAAjB;AACD,GAFD,MAEO;AACL;AACAsB,IAAAA,IAAI,IAAI,KAAR;AACD;;AAED,MAAInG,IAAI,CAACc,OAAL,KAAiB,UAArB,EAAiC;AAC/B,WAAQ,8BAA6BiB,kBAAkB,CAACoE,IAAD,CAAO,EAA9D;AACD;;AAED,SAAOA,IAAP;AACD;;AAEM,SAAS3E,mBAAT,CAA6BR,UAA7B,EAAyD;AAC9D,SAAOA,UAAU,CAACqF,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CAAP;AACD;;AAEM,SAASC,gBAAT,CAA0BC,MAAc,GAAG,CAA3C,EAAsD;AAC3D,MAAIC,QAAQ,GAAG,kCAAf;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/B,QAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,QAAQ,CAACD,MAApC,CAAR;AACA,QAAIQ,CAAC,GAAGP,QAAQ,CAACQ,MAAT,CAAgBL,CAAhB,EAAmB,CAAnB,CAAR;AACAF,IAAAA,MAAM,IAAIM,CAAV;AACD;;AACD,SAAON,MAAP;AACD;;AAEM,SAASQ,oBAAT,GAAwC;AAC7C,SAAQ,GAAEX,gBAAgB,CAAC,CAAD,CAAI,IAAGA,gBAAgB,CAAC,CAAD,CAAI,EAArD;AACD;;AAEM,SAASY,uBAAT,CAAiCC,QAAjC,EAA2D;AAChE,SAAQ,GAAEA,QAAS,IAAGb,gBAAgB,CAAC,CAAD,CAAI,IAAGA,gBAAgB,CAAC,CAAD,CAAI,EAAjE;AACD;;AAEM,SAASc,cAAT,GAAkC;AACvC,SAAO,CAACd,gBAAgB,CAAC,CAAD,CAAjB,EAAsBA,gBAAgB,CAAC,CAAD,CAAtC,EAA2Ce,IAA3C,CAAgD,GAAhD,CAAP;AACD;;AAEM,SAASC,SAAT,CAAmBC,CAAnB,EAAsC;AAC3C,SAAOA,CAAC,CACLC,WADI,GAEJnB,OAFI,CAEI,aAFJ,EAEmB,GAFnB,EAGJA,OAHI,CAGI,KAHJ,EAGW,EAHX,EAIJA,OAJI,CAII,KAJJ,EAIW,EAJX,CAAP;AAKD;;AAEM,SAASoB,4BAAT,CAAsClH,GAAtC,EAAmDmH,QAAnD,EAA6E;AAClF,MAAInH,GAAG,CAACoH,QAAJ,CAAaC,GAAG,GAACC,oCAAjB,CAAJ,EAA4D;AAC1D,WAAOtH,GAAG,CAAC8F,OAAJ,CAAYuB,GAAG,GAACC,oCAAhB,EAAsDH,QAAtD,CAAP;AACD,GAFD,MAEO;AACL,WAAOnH,GAAP;AACD;AACF;;AAEM,SAASuH,OAAT,CAAiBvH,GAAjB,EAAuC;AAC5C,SAAOwH,qBAAUC,KAAV,CAAgBzH,GAAhB,EAAqB;AAAE0H,IAAAA,SAAS,EAAE,CAAC,OAAD;AAAb,GAArB,CAAP;AACD","sourcesContent":["import joi from 'joi';\nimport os from 'os';\nimport url from 'url';\nimport validator from 'validator';\nimport * as ConfigUtils from '@expo/config';\n\nimport ip from './ip';\nimport Config from './Config';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts?: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, false, requestHostname);\n}\n\n// gets the base manifest URL and removes the scheme\nexport async function constructHostUriAsync(projectRoot: string, requestHostname?: string) {\n  let urlString = await constructUrlAsync(projectRoot, null, false, requestHostname);\n  // we need to use node's legacy urlObject api since the newer one doesn't like empty protocols\n  let urlObj = url.parse(urlString);\n  urlObj.protocol = '';\n  urlObj.slashes = false;\n  return url.format(urlObj);\n}\n\nexport async function constructLogUrlAsync(projectRoot: string, requestHostname?: string) {\n  let baseUrl = await constructUrlAsync(projectRoot, { urlType: 'http' }, false, requestHostname);\n  return `${baseUrl}/logs`;\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string,\n  opts?: Object\n) {\n  const defaultOpts = {\n    dev: false,\n    minify: true,\n  };\n  opts = opts || defaultOpts;\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  let mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  let queryParams = await constructBundleQueryParamsAsync(projectRoot, opts);\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string,\n  opts?: Object\n) {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname,\n    opts\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'map', requestHostname);\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(projectRoot, entryPoint, 'assets', requestHostname);\n}\n\nexport async function constructDebuggerHostAsync(projectRoot: string, requestHostname?: string) {\n  return constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport async function constructBundleQueryParamsAsync(projectRoot: string, opts: any) {\n  let queryParams = `dev=${encodeURIComponent(!!opts.dev)}`;\n\n  if (opts.hasOwnProperty('strict')) {\n    queryParams += `&strict=${encodeURIComponent(!!opts.strict)}`;\n  }\n\n  if (opts.hasOwnProperty('minify')) {\n    queryParams += `&minify=${encodeURIComponent(!!opts.minify)}`;\n  }\n\n  queryParams += '&hot=false';\n\n  let { exp } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n\n  // SDK11 to SDK32 require us to inject hashAssetFiles through the params, but this is not\n  // needed with SDK33+\n  let supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  let usesAssetPluginsQueryParam = supportsAssetPlugins && Versions.lteSdkVersion(exp, '32.0.0');\n  if (usesAssetPluginsQueryParam) {\n    // Use an absolute path here so that we can not worry about symlinks/relative requires\n    let pluginModule = ConfigUtils.resolveModule('expo/tools/hashAssetFiles', projectRoot, exp);\n    queryParams += `&assetPlugin=${encodeURIComponent(pluginModule)}`;\n  } else if (!supportsAssetPlugins) {\n    // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n    // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n    if (!supportsAssetPlugins) {\n      queryParams += '&includeAssetFileHashes=true';\n    }\n  }\n\n  return queryParams;\n}\n\nexport async function constructWebAppUrlAsync(projectRoot: string): Promise<string | null> {\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.webpackServerPort) {\n    return null;\n  }\n\n  const host = ip.address();\n\n  const { https } = await ProjectSettings.readAsync(projectRoot);\n  let urlType = 'http';\n  if (https === true) {\n    urlType = 'https';\n  }\n\n  return `${urlType}://${host}:${packagerInfo.webpackServerPort}`;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  opts: any,\n  isPackager: boolean,\n  requestHostname?: string\n): Promise<string> {\n  if (opts) {\n    let schema = joi.object().keys({\n      urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n      lanType: joi.any().valid('ip', 'hostname'),\n      hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n      dev: joi.boolean(),\n      strict: joi.boolean(),\n      minify: joi.boolean(),\n      https: joi.boolean().optional(),\n      urlRandomness: joi\n        .string()\n        .optional()\n        .allow(null),\n    });\n\n    const { error } = joi.validate(opts, schema);\n    if (error) {\n      throw new XDLError('INVALID_OPTIONS', error.toString());\n    }\n  }\n\n  let defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    opts = defaultOpts;\n  } else {\n    opts = Object.assign({}, defaultOpts, opts);\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol;\n  if (opts.urlType === 'http') {\n    protocol = 'http';\n  } else if (opts.urlType === 'no-protocol') {\n    protocol = null;\n  } else {\n    protocol = 'exp';\n\n    let { exp } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n    if (exp.detach) {\n      if (exp.scheme && Versions.gteSdkVersion(exp, '27.0.0')) {\n        protocol = exp.scheme;\n      } else if (exp.detach.scheme) {\n        // must keep this fallback in place for older projects\n        // and those detached with an older version of xdl\n        protocol = exp.detach.scheme;\n      }\n    }\n  }\n\n  let hostname;\n  let port;\n\n  const proxyURL = isPackager\n    ? process.env.EXPO_PACKAGER_PROXY_URL\n    : process.env.EXPO_MANIFEST_PROXY_URL;\n  if (proxyURL) {\n    const parsedProxyURL = url.parse(proxyURL);\n    hostname = parsedProxyURL.hostname;\n    port = parsedProxyURL.port;\n    if (parsedProxyURL.protocol === 'https:') {\n      if (protocol === 'http') {\n        protocol = 'https';\n      }\n      if (!port) {\n        port = '443';\n      }\n    }\n  } else if (opts.hostType === 'localhost' || requestHostname === 'localhost') {\n    hostname = '127.0.0.1';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME.trim();\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    let ngrokUrl = isPackager ? packagerInfo.packagerNgrokUrl : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl || typeof ngrokUrl !== 'string') {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        'Tunnel URL not found, falled back to LAN URL.',\n        'tunnel-url-not-found'\n      );\n      return constructUrlAsync(\n        projectRoot,\n        { ...opts, hostType: 'lan' },\n        isPackager,\n        requestHostname\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'tunnel-url-not-found');\n      let pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  let url_ = '';\n  if (protocol) {\n    url_ += `${protocol}://`;\n  }\n\n  if (!hostname) {\n    throw new Error('Hostname cannot be inferred.');\n  }\n\n  url_ += hostname;\n\n  if (port) {\n    url_ += `:${port}`;\n  } else {\n    // Android HMR breaks without this :|\n    url_ += ':80';\n  }\n\n  if (opts.urlType === 'redirect') {\n    return `https://exp.host/--/to-exp/${encodeURIComponent(url_)}`;\n  }\n\n  return url_;\n}\n\nexport function guessMainModulePath(entryPoint: string): string {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6): string {\n  let alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * alphabet.length);\n    let c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier(): string {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string): string {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness(): string {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string): string {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function getPlatformSpecificBundleUrl(url: string, platform: string): string {\n  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {\n    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);\n  } else {\n    return url;\n  }\n}\n\nexport function isHttps(url: string): boolean {\n  return validator.isURL(url, { protocols: ['https'] });\n}\n"],"file":"../UrlUtils.js","sourceRoot":"/@expo/xdl@56.2.1/src"}