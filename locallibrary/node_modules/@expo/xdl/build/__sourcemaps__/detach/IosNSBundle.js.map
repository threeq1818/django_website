{"version":3,"sources":["detach/IosNSBundle.js"],"names":["DEFAULT_FABRIC_KEY","KERNEL_URL","_configureInfoPlistForLocalDevelopment","config","exp","isDetached","detach","scheme","CFBundleURLTypes","CFBundleURLSchemes","push","UIDeviceFamily","_logDeveloperInfoForLocalDevelopment","infoPlist","let","usageKeysConfigured","key","hasOwnProperty","indexOf","length","logger","info","forEach","async","_cleanPropertyListBackupsAsync","context","backupPath","get","await","IosPlist","cleanBackupAsync","type","projectName","IosWorkspace","getPaths","_preloadManifestAndBundleAsync","manifest","supportingDirectory","manifestFilename","bundleFilename","bundleUrl","fs","writeFile","path","join","JSON","stringify","saveUrlToPathAsync","_maybeLegacyPreloadKernelManifestAndBundleAsync","sdkVersionSupported","getNewestSdkVersionSupportedAsync","parseSdkMajorVersion","kernelManifest","getManifestAsync","Accept","_configureEntitlementsAsync","data","keysToFlag","ios","usesIcloudStorage","associatedDomains","entitlementsFilename","appleTeamId","build","existsSync","createBlankAsync","result","modifyAsync","entitlements","configuration","bundleIdentifier","_getPrivateConfig","privateConfig","_isAppleUsageDescriptionKey","_configureInfoPlistAsync","usageDescriptionKeysConfigured","extraConfig","CFBundleIdentifier","Error","CFBundleName","name","CFBundleDisplayName","isExpoClientBuild","linkingSchemes","facebookScheme","startsWith","googleSignIn","reservedClientId","CFBundleURLName","facebookAppId","FacebookAppID","queriesSchemes","LSApplicationQueriesSchemes","concat","facebookDisplayName","FacebookDisplayName","usesNonExemptEncryption","ITSAppUsesNonExemptEncryption","googleMapsApiKey","GMSApiKey","version","buildNumber","CFBundleShortVersionString","CFBundleVersion","Fabric","APIKey","fabric","apiKey","Kits","KitInfo","KitName","branch","branch_key","live","permissionsAppName","replace","supportsTablet","isTabletOnly","UIRequiresFullScreen","requireFullScreen","Boolean","CFBundleExecutable","bundleExecutable","_configureShellPlistAsync","buildPhaseLogger","withFields","buildPhase","shellPlist","sdkVersion","isShell","manifestUrl","published","url","releaseChannel","testEnvironment","permissions","isManifestVerificationBypassed","areRemoteUpdatesEnabled","isRemoteJSEnabled","updates","enabled","manifestUsesSplashApi","isSplashScreenDisabled","_configureConstantsPlistAsync","constantsConfig","API_SERVER_ENDPOINT","process","env","ENVIRONMENT","_configureGoogleServicesPlistAsync","configureAsync","intermediatesDirectory","iosProjectDirectory","remove","IosLaunchScreen","configureLaunchAssetsAsync","IosLocalization","writeLocalizationResourcesAsync","iconPath","IosIcons","createAndWriteIconsToPathAsync","AssetBundle","bundleAsync","bundledAssets","e","IosAssetArchive","buildAssetArchiveAsync","err","console","error","Promise","all"],"mappings":";;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA;AACA;AACA,MAAMA,kBAAAA,GAAqB,0CAA3B;AACA,MAAMC,UAAAA,GAAa,gCAAnB;;AAEA,SAASC,sCAAT,CAAgDC,MAAhD,EAA6DC,GAA7D,EAAuE;AACrE;AACA,MAAIA,GAAG,CAACC,UAAJD,IAAkBA,GAAG,CAACE,MAAJF,CAAWG,MAAjC,EAAyC;AACvC,QAAI,CAACJ,MAAM,CAACK,gBAAZ,EAA8B;AAC5BL,MAAAA,MAAM,CAACK,gBAAPL,GAA0B,CACxB;AACEM,QAAAA,kBAAkB,EAAE;AADtB,OADwB,CAA1BN;AAKF;;AACAA,IAAAA,MAAM,CAACK,gBAAPL,CAAwB,CAAxBA,EAA2BM,kBAA3BN,CAA8CO,IAA9CP,CAAmDC,GAAG,CAACE,MAAJF,CAAWG,MAA9DJ;AACF,GAXqE,CAYrE;;;AACA,MAAIA,MAAM,CAACQ,cAAX,EAA2B;AACzB,WAAOR,MAAM,CAACQ,cAAd;AACF;;AACA,SAAOR,MAAP;AACF;AAEA;;;;;AAGA,SAASS,oCAAT,CAA8CC,SAA9C,EAA8D;AAC5D;AACAC,MAAIC,mBAAAA,GAAsB,EAA1BD;;AACA,OAAKA,IAAIE,GAAT,IAAgBH,SAAhB,EAA2B;AACzB,QAAIA,SAAS,CAACI,cAAVJ,CAAyBG,GAAzBH,KAAiCG,GAAG,CAACE,OAAJF,CAAY,kBAAZA,MAAoC,CAAC,CAA1E,EAA6E;AAC3ED,MAAAA,mBAAmB,CAACL,IAApBK,CAAyBC,GAAzBD;AACF;AACF;;AACA,MAAIA,mBAAmB,CAACI,MAAxB,EAAgC;AAC9BC,sBAAOC,IAAPD,CAAY,8EAAZA;;AACAL,IAAAA,mBAAmB,CAACO,OAApBP,CAA4BC,GAAAA,IAAO;AACjCI,wBAAOC,IAAPD,CAAa,KAAIJ,GAAI,EAArBI;AACD,KAFDL;;AAGAK,sBAAOC,IAAPD,CACE,4LADFA;AAGF;AACF;;AAEAG,eAAeC,8BAAfD,CAA8CE,OAA9CF,EAA0EG,UAA1EH,EAA8F;AAC5F,MAAII,oBAAIF,OAAJE,EAAa,qBAAbA,MAAwC,QAA5C,EAAsD;AACpDC,UAAMC,QAAQ,GAACC,gBAATD,CAA0BH,UAA1BG,EAAsC,SAAtCA,EAAiD,KAAjDA,CAAND;AACF;;AACAA,QAAMC,QAAQ,GAACC,gBAATD,CAA0BH,UAA1BG,EAAsC,MAAtCA,EAA8C,KAA9CA,CAAND,CAJ4F,CAK5F;;AACA,MAAIH,OAAO,CAACM,IAARN,KAAiB,SAArB,EAAgC;AAC9B,UAAM;AAAEO,MAAAA;AAAF,QAAkBC,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAxB;AACAL,UAAMC,QAAQ,GAACC,gBAATD,CAA0BH,UAA1BG,EAAuC,GAAEG,WAAY,eAArDH,EAAqE,KAArEA,CAAND;AACF;AACF;AAEA;;;;;AAGAL,eAAeY,8BAAfZ,CACEa,QADFb,EAEEc,mBAFFd,EAGEe,gBAHFf,EAIEgB,cAJFhB,EAKE;AACA,QAAMiB,SAAAA,GAAYJ,QAAQ,CAACI,SAA3B;AACAZ,QAAMa,mBAAGC,SAAHD,CAAaE,gBAAKC,IAALD,CAAUN,mBAAVM,EAA+BL,gBAA/BK,CAAbF,EAA+DI,IAAI,CAACC,SAALD,CAAeT,QAAfS,CAA/DJ,CAANb;AACAA,QAAMmB,yCAAmBP,SAAnBO,EAA8BJ,gBAAKC,IAALD,CAAUN,mBAAVM,EAA+BJ,cAA/BI,CAA9BI,CAANnB;AACF;AAEA;;;;;AAGAL,eAAeyB,+CAAfzB,CACEE,OADFF,EAEEe,gBAFFf,EAGEgB,cAHFhB,EAIE;AACA,QAAM;AAAEc,IAAAA;AAAF,MAA0BJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAhC;AACAnB,MAAImC,mBAAAA,GAAsBrB,MAAMK,YAAY,GAACiB,iCAAbjB,CAA+CR,OAA/CQ,CAAhCnB;;AAEA,MAAIqC,2CAAqBF,mBAArBE,IAA4C,EAAhD,EAAoD;AAClD/B,sBAAOC,IAAPD,CAAY,8BAAZA;;AACA,UAAMgC,cAAAA,GAAiBxB,MAAMyB,uCAAiBpD,UAAjBoD,EAA6B;AACxD,8BAAwBJ,mBADgC;AAExD,2BAAqB,KAFmC;AAGxDK,MAAAA,MAAM,EAAE;AAHgD,KAA7BD,CAA7B;AAKA,WAAOlB,8BAA8B,CACnCiB,cADmC,EAEnCf,mBAFmC,EAGnCC,gBAHmC,EAInCC,cAJmC,CAArC;AAMF;AACF;AAEA;;;;;AAGAhB,eAAegC,2BAAfhC,CAA2CE,OAA3CF,EAAuE;AACrE,MAAIE,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3B;AACA,UAAMrB,GAAAA,GAAMqB,OAAO,CAAC+B,IAAR/B,CAAarB,GAAzB;;AACAgB,sBAAOC,IAAPD,CACE,qLADFA;;AAGAN,QAAI2C,UAAAA,GAAa,EAAjB3C;;AACA,QAAIV,GAAG,CAACsD,GAAJtD,IAAWA,GAAG,CAACsD,GAAJtD,CAAQuD,iBAAvB,EAA0C;AACxCF,MAAAA,UAAU,CAAC/C,IAAX+C,CAAgB,uBAAhBA;AACF;;AACA,QAAIrD,GAAG,CAACsD,GAAJtD,IAAWA,GAAG,CAACsD,GAAJtD,CAAQwD,iBAAvB,EAA0C;AACxCH,MAAAA,UAAU,CAAC/C,IAAX+C,CAAgB,uBAAhBA;AACF;;AACA,QAAIA,UAAU,CAACtC,MAAf,EAAuB;AACrBC,wBAAOC,IAAPD,CAAY,+EAAZA;;AACAqC,MAAAA,UAAU,CAACnC,OAAXmC,CAAmBzC,GAAAA,IAAO;AACxBI,0BAAOC,IAAPD,CAAa,KAAIJ,GAAI,EAArBI;AACD,OAFDqC;AAGF;;AACA,WAAO,EAAP;AACF,GApBA,MAoBO;AACL;AACA,UAAM;AAAEzB,MAAAA,WAAF;AAAeK,MAAAA;AAAf,QAAuCJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAA7C;AACA,UAAMG,QAAAA,GAAWX,OAAO,CAAC+B,IAAR/B,CAAaW,QAA9B;AACA,UAAMyB,oBAAAA,GAAwB,GAAE7B,WAAY,eAA5C;AACA,UAAM8B,WAAAA,GAAcrC,OAAO,CAACsC,KAARtC,CAAciC,GAAdjC,CAAkBqC,WAAtC;;AACA,QAAI,CAACrB,mBAAGuB,UAAHvB,CAAcE,gBAAKC,IAALD,CAAUN,mBAAVM,EAA+BkB,oBAA/BlB,CAAdF,CAAL,EAA0E;AACxEb,YAAMC,QAAQ,GAACoC,gBAATpC,CAA0BQ,mBAA1BR,EAA+CgC,oBAA/ChC,CAAND;AACF;;AACA,UAAMsC,MAAAA,GAASrC,QAAQ,GAACsC,WAATtC,CAAqBQ,mBAArBR,EAA0CgC,oBAA1ChC,EAAgEuC,YAAAA,IAAgB;AAC7F;AACAA,MAAAA,YAAY,CAAC,iBAAD,CAAZA,GACE3C,OAAO,CAACsC,KAARtC,CAAc4C,aAAd5C,KAAgC,SAAhCA,GAA4C,YAA5CA,GAA2D,aAD7D2C,CAF6F,CAK7F;;AACA,UAAIhC,QAAQ,CAACsB,GAATtB,IAAgBA,QAAQ,CAACsB,GAATtB,CAAauB,iBAA7BvB,IAAkD0B,WAAtD,EAAmE;AACjEM,QAAAA,YAAY,CAAC,kDAAD,CAAZA,GAAmE,CACjE,YAAYhC,QAAQ,CAACsB,GAATtB,CAAakC,gBADwC,CAAnEF;AAGAA,QAAAA,YAAY,CAAC,oDAAD,CAAZA,GAAqE,CACnE,YAAYhC,QAAQ,CAACsB,GAATtB,CAAakC,gBAD0C,CAArEF;AAGAA,QAAAA,YAAY,CAAC,iDAAD,CAAZA,GACEN,WAAAA,GAAc,GAAdA,GAAoB1B,QAAQ,CAACsB,GAATtB,CAAakC,gBADnCF;AAEAA,QAAAA,YAAY,CAAC,qCAAD,CAAZA,GAAsD,CAAC,gBAAD,CAAtDA;AACF,OAVA,MAUO;AACL,SACE,kDADF,EAEE,qCAFF,EAGE,oDAHF,EAIE,iDAJF,EAKE9C,OALF,CAKUN,GAAAA,IAAO;AACf,cAAIoD,YAAY,CAACnD,cAAbmD,CAA4BpD,GAA5BoD,CAAJ,EAAsC;AACpC,mBAAOA,YAAY,CAACpD,GAAD,CAAnB;AACF;AACD,SATD;AAUF,OA3B6F,CA6B7F;;;AACA,UAAIoB,QAAQ,CAACsB,GAATtB,IAAgBA,QAAQ,CAACsB,GAATtB,CAAawB,iBAAjC,EAAoD;AAClDQ,QAAAA,YAAY,CAAC,wCAAD,CAAZA,GAAyDhC,QAAQ,CAACsB,GAATtB,CAAawB,iBAAtEQ;AACF,OAFA,MAEO,IAAIA,YAAY,CAACnD,cAAbmD,CAA4B,wCAA5BA,CAAJ,EAA2E;AAChF,eAAOA,YAAY,CAAC,wCAAD,CAAnB;AACF,OAlC6F,CAoC7F;AACA;;;AACA,aAAOA,YAAY,CAAC,qCAAD,CAAnB;AAEA,aAAOA,YAAP;AACD,KAzCcvC,CAAf;AA0CA,WAAOqC,MAAP;AACF;AACF;AAEA;;;;;;;AAKA,SAASK,iBAAT,CAA2B9C,OAA3B,EAA4D;AAC1DX,MAAI0D,aAAJ1D;;AACA,MAAIW,OAAO,CAACM,IAARN,KAAiB,SAArB,EAAgC;AAC9B+C,IAAAA,aAAAA,GAAgB/C,OAAO,CAAC+B,IAAR/B,CAAa+C,aAA7BA;AACF,GAFA,MAEO,IAAI/C,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAClC,UAAMrB,GAAAA,GAAMqB,OAAO,CAAC+B,IAAR/B,CAAarB,GAAzB;;AACA,QAAIA,GAAAA,IAAOA,GAAG,CAACsD,GAAf,EAAoB;AAClBc,MAAAA,aAAAA,GAAgBpE,GAAG,CAACsD,GAAJtD,CAAQD,MAAxBqE;AACF;AACF;;AACA,SAAOA,aAAP;AACF;;AAEA,SAASC,2BAAT,CAAqCzD,GAArC,EAA2D;AACzD,SAAOA,GAAG,CAACE,OAAJF,CAAY,kBAAZA,MAAoC,CAAC,CAA5C;AACF;AAEA;;;;;AAGAO,eAAemD,wBAAfnD,CAAwCE,OAAxCF,EAAoE;AAClE,QAAM;AAAEc,IAAAA;AAAF,MAA0BJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAhC;AACA,QAAM9B,MAAAA,GAASsB,OAAO,CAACtB,MAAvB;;AACA,QAAMqE,aAAAA,GAAgBD,iBAAiB,CAAC9C,OAAD,CAAvC;;AAEAX,MAAIoD,MAAAA,GAAStC,MAAMC,QAAQ,GAACsC,WAATtC,CAAqBQ,mBAArBR,EAA0C,MAA1CA,EAAkDhB,SAAAA,IAAa;AAChF;AACA;AACAC,QAAI6D,8BAAAA,GAAiC,EAArC7D;;AACA,QAAIX,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWU,SAA7B,EAAwC;AACtCC,UAAI8D,WAAAA,GAAczE,MAAM,CAACuD,GAAPvD,CAAWU,SAA7BC;;AACA,WAAKA,IAAIE,GAAT,IAAgB4D,WAAhB,EAA6B;AAC3B,YAAIA,WAAW,CAAC3D,cAAZ2D,CAA2B5D,GAA3B4D,CAAJ,EAAqC;AACnC/D,UAAAA,SAAS,CAACG,GAAD,CAATH,GAAiB+D,WAAW,CAAC5D,GAAD,CAA5BH,CADmC,CAGnC;;AACA,cAAI4D,2BAA2B,CAACzD,GAAD,CAA/B,EAAsC;AACpC2D,YAAAA,8BAA8B,CAAC3D,GAAD,CAA9B2D,GAAsC,IAAtCA;AACF;AACF;AACF;AACF,KAhBgF,CAkBhF;;;AACA9D,IAAAA,SAAS,CAACgE,kBAAVhE,GACEV,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWmE,gBAAzBnE,GAA4CA,MAAM,CAACuD,GAAPvD,CAAWmE,gBAAvDnE,GAA0E,IAD5EU;;AAEA,QAAI,CAACA,SAAS,CAACgE,kBAAf,EAAmC;AACjC,YAAM,IAAIC,KAAJ,CAAW,wDAAX,CAAN;AACF,KAvBgF,CAyBhF;;;AACAjE,IAAAA,SAAS,CAACkE,YAAVlE,GAAyBV,MAAM,CAAC6E,IAAhCnE;AACAA,IAAAA,SAAS,CAACoE,mBAAVpE,GAAgCY,OAAO,CAACsC,KAARtC,CAAcyD,iBAAdzD,KAC5B,eAD4BA,GAE5BtB,MAAM,CAAC6E,IAFXnE,CA3BgF,CA+BhF;;AACAC,QAAIqE,cAAAA,GAAiBhF,MAAM,CAACI,MAAPJ,GAAgB,CAACA,MAAM,CAACI,MAAR,CAAhBJ,GAAkC,EAAvDW;;AACA,QAAIX,MAAM,CAACiF,cAAPjF,IAAyBA,MAAM,CAACiF,cAAPjF,CAAsBkF,UAAtBlF,CAAiC,IAAjCA,CAA7B,EAAqE;AACnEgF,MAAAA,cAAc,CAACzE,IAAfyE,CAAoBhF,MAAM,CAACiF,cAA3BD;AACF;;AAEA,QACEX,aAAAA,IACAA,aAAa,CAACc,YADdd,IAEAA,aAAa,CAACc,YAAdd,CAA2Be,gBAH7B,EAIE;AACAJ,MAAAA,cAAc,CAACzE,IAAfyE,CAAoBX,aAAa,CAACc,YAAdd,CAA2Be,gBAA/CJ;AACF,KA3CgF,CA6ChF;;;AACAtE,IAAAA,SAAS,CAACL,gBAAVK,GAA6B,CAC3B;AACEJ,MAAAA,kBAAkB,EAAE0E;AADtB,KAD2B,EAI3B;AACE;AACA;AACAK,MAAAA,eAAe,EAAE,eAHnB;AAIE/E,MAAAA,kBAAkB,EAAE,CAACI,SAAS,CAACgE,kBAAX;AAJtB,KAJ2B,CAA7BhE,CA9CgF,CA0DhF;;AACA,QAAIV,MAAM,CAACsF,aAAX,EAA0B;AACxB5E,MAAAA,SAAS,CAAC6E,aAAV7E,GAA0BV,MAAM,CAACsF,aAAjC5E;AACAC,UAAI6E,cAAAA,GAAiB9E,SAAS,CAAC+E,2BAAV/E,IAAyC,EAA9DC;AACA6E,MAAAA,cAAAA,GAAiBA,cAAc,CAACE,MAAfF,CAAsB,CACrC,OADqC,EAErC,kBAFqC,EAGrC,SAHqC,EAIrC,kBAJqC,CAAtBA,CAAjBA;AAMA9E,MAAAA,SAAS,CAAC+E,2BAAV/E,GAAwC8E,cAAxC9E;AACF,KAVA,MAUO;AACL,aAAOA,SAAS,CAAC,eAAD,CAAhB;AACF;;AACA,QAAIV,MAAM,CAAC2F,mBAAX,EAAgC;AAC9BjF,MAAAA,SAAS,CAACkF,mBAAVlF,GAAgCV,MAAM,CAAC2F,mBAAvCjF;AACF,KAFA,MAEO;AACL,aAAOA,SAAS,CAAC,qBAAD,CAAhB;AACF,KA5EgF,CA8EhF;AACA;;;AACA,QACE2D,aAAAA,IACAA,aAAa,CAACvD,cAAduD,CAA6B,yBAA7BA,CADAA,IAEAA,aAAa,CAACwB,uBAAdxB,KAA0C,KAH5C,EAIE;AACA3D,MAAAA,SAAS,CAACoF,6BAAVpF,GAA0C,KAA1CA;AACF,KAtFgF,CAwFhF;;;AACA,QAAI2D,aAAAA,IAAiBA,aAAa,CAAC0B,gBAAnC,EAAqD;AACnDrF,MAAAA,SAAS,CAACsF,SAAVtF,GAAsB2D,aAAa,CAAC0B,gBAApCrF;AACF,KA3FgF,CA6FhF;;;AACAC,QAAIsF,OAAAA,GAAUjG,MAAM,CAACiG,OAAPjG,GAAiBA,MAAM,CAACiG,OAAxBjG,GAAkC,OAAhDW;AACAA,QAAIuF,WAAAA,GAAclG,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWkG,WAAzBlG,GAAuCA,MAAM,CAACuD,GAAPvD,CAAWkG,WAAlDlG,GAAgE,GAAlFW;AACAD,IAAAA,SAAS,CAACyF,0BAAVzF,GAAuCuF,OAAvCvF;AACAA,IAAAA,SAAS,CAAC0F,eAAV1F,GAA4BwF,WAA5BxF;AAEAA,IAAAA,SAAS,CAAC2F,MAAV3F,GAAmB;AACjB4F,MAAAA,MAAM,EACHjC,aAAAA,IAAiBA,aAAa,CAACkC,MAA/BlC,IAAyCA,aAAa,CAACkC,MAAdlC,CAAqBmC,MAA/D,IACA3G,kBAHe;AAIjB4G,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,OAAO,EAAE,EADX;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADI;AAJW,KAAnBjG;;AAYA,QAAI2D,aAAAA,IAAiBA,aAAa,CAACuC,MAAnC,EAA2C;AACzClG,MAAAA,SAAS,CAACmG,UAAVnG,GAAuB;AACrBoG,QAAAA,IAAI,EAAEzC,aAAa,CAACuC,MAAdvC,CAAqBmC;AADN,OAAvB9F;AAGF;;AAEAC,QAAIoG,kBAAAA,GAAqB/G,MAAM,CAAC6E,IAAP7E,GAAcA,MAAM,CAAC6E,IAArB7E,GAA4B,UAArDW;;AACA,SAAKA,IAAIE,GAAT,IAAgBH,SAAhB,EAA2B;AACzB,UACEA,SAAS,CAACI,cAAVJ,CAAyBG,GAAzBH,KACA4D,2BAA2B,CAACzD,GAAD,CAD3BH,IAEA,CAAC8D,8BAA8B,CAAC1D,cAA/B0D,CAA8C3D,GAA9C2D,CAHH,EAIE;AACA9D,QAAAA,SAAS,CAACG,GAAD,CAATH,GAAiBA,SAAS,CAACG,GAAD,CAATH,CAAesG,OAAftG,CAAuB,kBAAvBA,EAA2CqG,kBAA3CrG,CAAjBA;AACF;AACF,KA9HgF,CAgIhF;;;AACAA,IAAAA,SAAS,CAACF,cAAVE,GAA2BV,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWiH,cAAzBjH,GAA0C,CAAC,CAAD,EAAI,CAAJ,CAA1CA,GAAmD,CAAC,CAAD,CAA9EU,CAjIgF,CAmIhF;;AACA,QAAIV,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWkH,YAA7B,EAA2C;AACzCxG,MAAAA,SAAS,CAACF,cAAVE,GAA2B,CAAC,CAAD,CAA3BA;AACF,KAtIgF,CAwIhF;;;AACAA,IAAAA,SAAS,CAACyG,oBAAVzG,GAAiCV,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWoH,iBAA1D1G;;AACA,QAAIA,SAAS,CAACyG,oBAAVzG,IAAkC,IAAtC,EAA4C;AAC1C;AACAA,MAAAA,SAAS,CAACyG,oBAAVzG,GAAiC,IAAjCA;AACF,KA7IgF,CA8IhF;;;AACAA,IAAAA,SAAS,CAACyG,oBAAVzG,GAAiC2G,OAAO,CAAC3G,SAAS,CAACyG,oBAAX,CAAxCzG,CA/IgF,CAiJhF;;AACA,QAAIY,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3BZ,MAAAA,SAAAA,GAAYX,sCAAsC,CAACW,SAAD,EAAYY,OAAO,CAAC+B,IAAR/B,CAAarB,GAAzB,CAAlDS;;AACAD,MAAAA,oCAAoC,CAACC,SAAD,CAApCD;AACF;;AAEA,QAAIa,OAAO,CAACM,IAARN,KAAiB,SAArB,EAAgC;AAC9BZ,MAAAA,SAAS,CAAC4G,kBAAV5G,GAA+BY,OAAO,CAACsC,KAARtC,CAAciC,GAAdjC,CAAkBiG,gBAAjD7G;AACF;;AAEA,WAAOA,SAAP;AACD,GA5JkBgB,CAAnBf;AA6JA,SAAOoD,MAAP;AACF;AAEA;;;;;AAGA3C,eAAeoG,yBAAfpG,CAAyCE,OAAzCF,EAAqE;AACnE,QAAM;AAAEc,IAAAA;AAAF,MAA0BJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAhC;AACA,QAAM9B,MAAAA,GAASsB,OAAO,CAACtB,MAAvB;;AACA,QAAMyH,gBAAAA,GAAmBxG,kBAAOyG,UAAPzG,CAAkB;AAAE0G,IAAAA,UAAU,EAAE;AAAd,GAAlB1G,CAAzB;;AAEAQ,QAAMC,QAAQ,GAACsC,WAATtC,CAAqBQ,mBAArBR,EAA0C,SAA1CA,EAAqDkG,UAAAA,IAAc;AACvE;AACA,QAAI5E,2CAAqBhD,MAAM,CAAC6H,UAA5B7E,IAA0C,EAA9C,EAAkD;AAChD4E,MAAAA,UAAU,CAACE,OAAXF,GAAqB,IAArBA;AACF;;AACAA,IAAAA,UAAU,CAACG,WAAXH,GAAyBtG,OAAO,CAAC0G,SAAR1G,CAAkB2G,GAA3CL;AACAA,IAAAA,UAAU,CAACM,cAAXN,GAA4BtG,OAAO,CAAC0G,SAAR1G,CAAkB4G,cAA9CN;;AACA,QAAItG,OAAO,CAAC+B,IAAR/B,CAAa6G,eAAjB,EAAkC;AAChCP,MAAAA,UAAU,CAACO,eAAXP,GAA6BtG,OAAO,CAAC+B,IAAR/B,CAAa6G,eAA1CP;AACF;;AACA,QAAI5H,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWoI,WAA7B,EAA0C;AACxCR,MAAAA,UAAU,CAACQ,WAAXR,GAAyB5H,MAAM,CAACuD,GAAPvD,CAAWoI,WAApCR;AACF;;AACA,QAAItG,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3B;AACA;AACAsG,MAAAA,UAAU,CAACS,8BAAXT,GAA4C,IAA5CA;AACF;;AACA,QAAI5H,MAAM,CAACuD,GAAPvD,IAAcA,MAAM,CAACuD,GAAPvD,CAAWc,cAAXd,CAA0B,mBAA1BA,CAAlB,EAAkE;AAChE;AACA4H,MAAAA,UAAU,CAACU,uBAAXV,GAAqC5H,MAAM,CAACuD,GAAPvD,CAAWuI,iBAAhDX;AACF;;AACA,QAAI5H,MAAM,CAACwI,OAAPxI,IAAkBA,MAAM,CAACwI,OAAPxI,CAAec,cAAfd,CAA8B,SAA9BA,CAAtB,EAAgE;AAC9D;AACA4H,MAAAA,UAAU,CAACU,uBAAXV,GAAqC5H,MAAM,CAACwI,OAAPxI,CAAeyI,OAApDb;AACF;;AACA,QAAI,CAACc,4CAAsB1I,MAAtB0I,EAA8B,KAA9BA,CAAD,IAAyC1F,2CAAqBhD,MAAM,CAAC6H,UAA5B7E,IAA0C,EAAvF,EAA2F;AACzF;AACA;AACA4E,MAAAA,UAAU,CAACe,sBAAXf,GAAoC,IAApCA;AACF;;AAEAH,IAAAA,gBAAgB,CAACvG,IAAjBuG,CAAsB,0BAAtBA,EAAkDG,UAAlDH;AACA,WAAOG,UAAP;AACD,GAlCKlG,CAAND;AAmCF;;AAEAL,eAAewH,6BAAfxH,CAA6CE,OAA7CF,EAAyE;AACvE,MAAIE,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3B;AACF;;AAEA,QAAM;AAAEY,IAAAA;AAAF,MAA0BJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAhC;AACAL,QAAMC,QAAQ,GAACsC,WAATtC,CAAqBQ,mBAArBR,EAA0C,kBAA1CA,EAA8DmH,eAAAA,IAAmB;AACrFA,IAAAA,eAAe,CAACC,mBAAhBD,GACEE,OAAO,CAACC,GAARD,CAAYE,WAAZF,KAA4B,SAA5BA,GACI,qCADJA,GAEI,6BAHNF;AAIA,WAAOA,eAAP;AACD,GANKnH,CAAND;AAOF;;AAEAL,eAAe8H,kCAAf9H,CAAkDE,OAAlDF,EAA8E;AAC5E,MAAIE,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3B;AACF;;AACA,MAAIE,oBAAIF,OAAJE,EAAa,sCAAbA,CAAJ,EAA0D;AACxD,UAAM;AAAEU,MAAAA;AAAF,QAA0BJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CAAhC;AACAL,UAAMa,mBAAGC,SAAHD,CACJE,gBAAKC,IAALD,CAAUN,mBAAVM,EAA+B,0BAA/BA,CADIF,EAEJd,oBAAIF,OAAJE,EAAa,sCAAbA,CAFIc,EAGJ,QAHIA,CAANb;AAKF;AACF;;AAEAL,eAAe+H,cAAf/H,CAA8BE,OAA9BF,EAA0D;AACxD,QAAMqG,gBAAAA,GAAmBxG,kBAAOyG,UAAPzG,CAAkB;AAAE0G,IAAAA,UAAU,EAAE;AAAd,GAAlB1G,CAAzB;;AAEAN,MAAI;AACFyI,IAAAA,sBADE;AAEFC,IAAAA,mBAFE;AAGFxH,IAAAA,WAHE;AAIFK,IAAAA;AAJE,MAKAJ,YAAY,GAACC,QAAbD,CAAsBR,OAAtBQ,CALJnB;;AAMA,MAAI,CAACW,OAAO,CAACsC,KAARtC,CAAcyD,iBAAdzD,EAAD,IAAsC,CAACA,OAAO,CAAC0G,SAAR1G,CAAkB2G,GAA7D,EAAkE;AAChE,UAAM,IAAItD,KAAJ,CAAW,qDAAX,CAAN;AACF,GAXwD,CAaxD;AACA;;;AACAlD,QAAMa,mBAAGgH,MAAHhH,CAAU8G,sBAAV9G,CAANb;;AAEA,MAAI;AACF;AACAgG,IAAAA,gBAAgB,CAACvG,IAAjBuG,CAAuB,uCAAsCvF,mBAAoB,KAAjFuF;AACAhG,UAAM8C,wBAAwB,CAACjD,OAAD,CAA9BG;;AACA,QAAI,CAACH,OAAO,CAACsC,KAARtC,CAAcyD,iBAAdzD,EAAL,EAAwC;AACtCG,YAAM+F,yBAAyB,CAAClG,OAAD,CAA/BG;AACF;;AACAA,UAAM2B,2BAA2B,CAAC9B,OAAD,CAAjCG;AACAA,UAAMmH,6BAA6B,CAACtH,OAAD,CAAnCG;AACAA,UAAMyH,kCAAkC,CAAC5H,OAAD,CAAxCG;;AACA,QAAI,CAACH,OAAO,CAACsC,KAARtC,CAAcyD,iBAAdzD,EAAL,EAAwC;AACtCG,YAAM8H,eAAe,GAACC,0BAAhBD,CAA2CjI,OAA3CiI,EAAoDH,sBAApDG,CAAN9H;AACAA,YAAMgI,eAAe,GAACC,+BAAhBD,CAAgD;AACpDvH,QAAAA,mBADoD;AAEpDZ,QAAAA;AAFoD,OAAhDmI,CAANhI;AAIF;;AAEA,QAAIH,OAAO,CAACsC,KAARtC,CAAcyD,iBAAdzD,EAAJ,EAAuC;AACrC;AACF;;AAEA,QAAIA,OAAO,CAACM,IAARN,KAAiB,MAArB,EAA6B;AAC3B,YAAMqI,QAAAA,GAAWnH,gBAAKC,IAALD,CACf6G,mBADe7G,EAEfX,WAFeW,EAGf,iBAHeA,EAIf,oBAJeA,CAAjB;;AAMAf,YAAMmI,QAAQ,GAACC,8BAATD,CAAwCtI,OAAxCsI,EAAiDD,QAAjDC,CAANnI;AACF,KARA,MAQO,IAAIH,OAAO,CAACM,IAARN,KAAiB,SAArB,EAAgC;AACrCmG,MAAAA,gBAAgB,CAACvG,IAAjBuG,CAAsB,oBAAtBA;;AACA,UAAI;AACFhG,cAAMqI,WAAW,GAACC,WAAZD,CACJxI,OADIwI,EAEJxI,OAAO,CAAC+B,IAAR/B,CAAaW,QAAbX,CAAsB0I,aAFlBF,EAGJ5H,mBAHI4H,EAIJxI,OAAO,CAAC+B,IAAR/B,CAAaW,QAAbX,CAAsBuG,UAAtBvG,KAAqC,QAJjCwI,CAANrI;AAMF,OAPA,CAOE,OAAOwI,CAAP,EAAU;AACV,cAAM,IAAItF,KAAJ,CAAW,0BAAyBsF,CAAE,EAAtC,CAAN;AACF;;AACAxC,MAAAA,gBAAgB,CAACvG,IAAjBuG,CAAsB,wBAAtBA;AACAhG,YAAMyI,eAAe,GAACC,sBAAhBD,CACJ5I,OADI4I,EAEJhI,mBAFIgI,EAGJd,sBAHIc,CAANzI;AAKAA,YAAMO,8BAA8B,CAClCV,OAAO,CAAC+B,IAAR/B,CAAaW,QADqB,EAElCC,mBAFkC,EAGlC,yBAHkC,EAIlC,kBAJkC,CAApCT;AAMF;;AAEAA,UAAMoB,+CAA+C,CACnDvB,OADmD,EAEnD,sBAFmD,EAGnD,mBAHmD,CAArDG;AAKF,GA7DA,CA6DE,OAAO2I,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAARD,CAAcD,GAAdC;AACA,UAAMD,GAAN;AACF,GAhEA,SAgEU;AACR3C,IAAAA,gBAAgB,CAACvG,IAAjBuG,CAAsB,oBAAtBA;AACAhG,UAAM8I,OAAO,CAACC,GAARD,CAAY,CAChBlJ,8BAA8B,CAACC,OAAD,EAAUY,mBAAV,CADd,EAEhBI,mBAAGgH,MAAHhH,CAAU8G,sBAAV9G,CAFgB,CAAZiI,CAAN9I;AAIF;AACF","file":"../../detach/IosNSBundle.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport get from 'lodash/get';\n\nimport {\n  getManifestAsync,\n  saveUrlToPathAsync,\n  manifestUsesSplashApi,\n  parseSdkMajorVersion,\n} from './ExponentTools';\nimport * as IosAssetArchive from './IosAssetArchive';\nimport * as AssetBundle from './AssetBundle';\nimport * as IosIcons from './IosIcons';\nimport * as IosPlist from './IosPlist';\nimport * as IosLaunchScreen from './IosLaunchScreen';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneContext from './StandaloneContext';\nimport * as IosLocalization from './IosLocalization';\nimport logger from './Logger';\n\n// TODO: move this somewhere else. this is duplicated in universe/exponent/template-files/keys,\n// but xdl doesn't have access to that.\nconst DEFAULT_FABRIC_KEY = '81130e95ea13cd7ed9a4f455e96214902c721c99';\nconst KERNEL_URL = 'https://expo.io/@exponent/home';\n\nfunction _configureInfoPlistForLocalDevelopment(config: any, exp: any) {\n  // add detached scheme\n  if (exp.isDetached && exp.detach.scheme) {\n    if (!config.CFBundleURLTypes) {\n      config.CFBundleURLTypes = [\n        {\n          CFBundleURLSchemes: [],\n        },\n      ];\n    }\n    config.CFBundleURLTypes[0].CFBundleURLSchemes.push(exp.detach.scheme);\n  }\n  // for local dev, don't specify device family here\n  if (config.UIDeviceFamily) {\n    delete config.UIDeviceFamily;\n  }\n  return config;\n}\n\n/**\n *  Prints warnings or info about the configured environment for local development.\n */\nfunction _logDeveloperInfoForLocalDevelopment(infoPlist: any) {\n  // warn about *UsageDescription changes\n  let usageKeysConfigured = [];\n  for (let key in infoPlist) {\n    if (infoPlist.hasOwnProperty(key) && key.indexOf('UsageDescription') !== -1) {\n      usageKeysConfigured.push(key);\n    }\n  }\n  if (usageKeysConfigured.length) {\n    logger.info('We added some permissions keys to `Info.plist` in your detached iOS project:');\n    usageKeysConfigured.forEach(key => {\n      logger.info(`  ${key}`);\n    });\n    logger.info(\n      'You may want to revise them to include language appropriate to your project. You can also remove them if your app will never use the corresponding API. See the Apple docs for these keys.'\n    );\n  }\n}\n\nasync function _cleanPropertyListBackupsAsync(context: StandaloneContext, backupPath: string) {\n  if (get(context, 'build.ios.buildType') !== 'client') {\n    await IosPlist.cleanBackupAsync(backupPath, 'EXShell', false);\n  }\n  await IosPlist.cleanBackupAsync(backupPath, 'Info', false);\n  // TODO: support this in user contexts as well\n  if (context.type === 'service') {\n    const { projectName } = IosWorkspace.getPaths(context);\n    await IosPlist.cleanBackupAsync(backupPath, `${projectName}.entitlements`, false);\n  }\n}\n\n/**\n * Write the manifest and JS bundle to the NSBundle.\n */\nasync function _preloadManifestAndBundleAsync(\n  manifest: any,\n  supportingDirectory: string,\n  manifestFilename: string,\n  bundleFilename: string\n) {\n  const bundleUrl = manifest.bundleUrl;\n  await fs.writeFile(path.join(supportingDirectory, manifestFilename), JSON.stringify(manifest));\n  await saveUrlToPathAsync(bundleUrl, path.join(supportingDirectory, bundleFilename));\n}\n\n/**\n *  This method only makes sense when operating on a context with sdk version < 26.\n */\nasync function _maybeLegacyPreloadKernelManifestAndBundleAsync(\n  context: StandaloneContext,\n  manifestFilename: string,\n  bundleFilename: string\n) {\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  let sdkVersionSupported = await IosWorkspace.getNewestSdkVersionSupportedAsync(context);\n\n  if (parseSdkMajorVersion(sdkVersionSupported) < 26) {\n    logger.info('Preloading Expo kernel JS...');\n    const kernelManifest = await getManifestAsync(KERNEL_URL, {\n      'Exponent-SDK-Version': sdkVersionSupported,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    return _preloadManifestAndBundleAsync(\n      kernelManifest,\n      supportingDirectory,\n      manifestFilename,\n      bundleFilename\n    );\n  }\n}\n\n/**\n * Configure a standalone entitlements file.\n */\nasync function _configureEntitlementsAsync(context: StandaloneContext) {\n  if (context.type === 'user') {\n    // don't modify .entitlements, print info/instructions\n    const exp = context.data.exp;\n    logger.info(\n      'Your iOS ExpoKit project will not contain an .entitlements file by default. If you need specific Apple entitlements, enable them manually via Xcode or the Apple Developer website.'\n    );\n    let keysToFlag = [];\n    if (exp.ios && exp.ios.usesIcloudStorage) {\n      keysToFlag.push('ios.usesIcloudStorage');\n    }\n    if (exp.ios && exp.ios.associatedDomains) {\n      keysToFlag.push('ios.associatedDomains');\n    }\n    if (keysToFlag.length) {\n      logger.info('We noticed the following keys in your project which may require entitlements:');\n      keysToFlag.forEach(key => {\n        logger.info(`  ${key}`);\n      });\n    }\n    return {};\n  } else {\n    // modify the .entitlements file\n    const { projectName, supportingDirectory } = IosWorkspace.getPaths(context);\n    const manifest = context.data.manifest;\n    const entitlementsFilename = `${projectName}.entitlements`;\n    const appleTeamId = context.build.ios.appleTeamId;\n    if (!fs.existsSync(path.join(supportingDirectory, entitlementsFilename))) {\n      await IosPlist.createBlankAsync(supportingDirectory, entitlementsFilename);\n    }\n    const result = IosPlist.modifyAsync(supportingDirectory, entitlementsFilename, entitlements => {\n      // push notif entitlement changes based on build configuration\n      entitlements['aps-environment'] =\n        context.build.configuration === 'Release' ? 'production' : 'development';\n\n      // remove iCloud-specific entitlements if the developer isn't using iCloud Storage with DocumentPicker\n      if (manifest.ios && manifest.ios.usesIcloudStorage && appleTeamId) {\n        entitlements['com.apple.developer.icloud-container-identifiers'] = [\n          'iCloud.' + manifest.ios.bundleIdentifier,\n        ];\n        entitlements['com.apple.developer.ubiquity-container-identifiers'] = [\n          'iCloud.' + manifest.ios.bundleIdentifier,\n        ];\n        entitlements['com.apple.developer.ubiquity-kvstore-identifier'] =\n          appleTeamId + '.' + manifest.ios.bundleIdentifier;\n        entitlements['com.apple.developer.icloud-services'] = ['CloudDocuments'];\n      } else {\n        [\n          'com.apple.developer.icloud-container-identifiers',\n          'com.apple.developer.icloud-services',\n          'com.apple.developer.ubiquity-container-identifiers',\n          'com.apple.developer.ubiquity-kvstore-identifier',\n        ].forEach(key => {\n          if (entitlements.hasOwnProperty(key)) {\n            delete entitlements[key];\n          }\n        });\n      }\n\n      // Add app associated domains remove exp-specific ones.\n      if (manifest.ios && manifest.ios.associatedDomains) {\n        entitlements['com.apple.developer.associated-domains'] = manifest.ios.associatedDomains;\n      } else if (entitlements.hasOwnProperty('com.apple.developer.associated-domains')) {\n        delete entitlements['com.apple.developer.associated-domains'];\n      }\n\n      // for now, remove any merchant ID in shell apps\n      // (TODO: better plan for payments)\n      delete entitlements['com.apple.developer.in-app-payments'];\n\n      return entitlements;\n    });\n    return result;\n  }\n}\n\n/**\n *  Resolve the private config for a project.\n *  For standalone apps, this is copied into a separate context field context.data.privateConfig\n *  by the turtle builder. For a local project, this is available in app.json under ios.config.\n */\nfunction _getPrivateConfig(context: StandaloneContext): any {\n  let privateConfig;\n  if (context.type === 'service') {\n    privateConfig = context.data.privateConfig;\n  } else if (context.type === 'user') {\n    const exp = context.data.exp;\n    if (exp && exp.ios) {\n      privateConfig = exp.ios.config;\n    }\n  }\n  return privateConfig;\n}\n\nfunction _isAppleUsageDescriptionKey(key: string): boolean {\n  return key.indexOf('UsageDescription') !== -1;\n}\n\n/**\n * Configure an iOS Info.plist for a standalone app.\n */\nasync function _configureInfoPlistAsync(context: StandaloneContext) {\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const config = context.config;\n  const privateConfig = _getPrivateConfig(context);\n\n  let result = await IosPlist.modifyAsync(supportingDirectory, 'Info', infoPlist => {\n    // make sure this happens first:\n    // apply any custom information from ios.infoPlist prior to all other exponent config\n    let usageDescriptionKeysConfigured = {};\n    if (config.ios && config.ios.infoPlist) {\n      let extraConfig = config.ios.infoPlist;\n      for (let key in extraConfig) {\n        if (extraConfig.hasOwnProperty(key)) {\n          infoPlist[key] = extraConfig[key];\n\n          // if the user provides *UsageDescription keys, don't override them later.\n          if (_isAppleUsageDescriptionKey(key)) {\n            usageDescriptionKeysConfigured[key] = true;\n          }\n        }\n      }\n    }\n\n    // bundle id\n    infoPlist.CFBundleIdentifier =\n      config.ios && config.ios.bundleIdentifier ? config.ios.bundleIdentifier : null;\n    if (!infoPlist.CFBundleIdentifier) {\n      throw new Error(`Cannot configure an iOS app with no bundle identifier.`);\n    }\n\n    // app name\n    infoPlist.CFBundleName = config.name;\n    infoPlist.CFBundleDisplayName = context.build.isExpoClientBuild()\n      ? 'Expo (Custom)'\n      : config.name;\n\n    // determine app linking schemes\n    let linkingSchemes = config.scheme ? [config.scheme] : [];\n    if (config.facebookScheme && config.facebookScheme.startsWith('fb')) {\n      linkingSchemes.push(config.facebookScheme);\n    }\n\n    if (\n      privateConfig &&\n      privateConfig.googleSignIn &&\n      privateConfig.googleSignIn.reservedClientId\n    ) {\n      linkingSchemes.push(privateConfig.googleSignIn.reservedClientId);\n    }\n\n    // remove exp scheme, add app scheme(s)\n    infoPlist.CFBundleURLTypes = [\n      {\n        CFBundleURLSchemes: linkingSchemes,\n      },\n      {\n        // Add the generic oauth redirect, it's important that it has the name\n        // 'OAuthRedirect' so we can find it in app code.\n        CFBundleURLName: 'OAuthRedirect',\n        CFBundleURLSchemes: [infoPlist.CFBundleIdentifier],\n      },\n    ];\n\n    // add or remove other facebook config\n    if (config.facebookAppId) {\n      infoPlist.FacebookAppID = config.facebookAppId;\n      let queriesSchemes = infoPlist.LSApplicationQueriesSchemes || [];\n      queriesSchemes = queriesSchemes.concat([\n        'fbapi',\n        'fb-messenger-api',\n        'fbauth2',\n        'fbshareextension',\n      ]);\n      infoPlist.LSApplicationQueriesSchemes = queriesSchemes;\n    } else {\n      delete infoPlist['FacebookAppID'];\n    }\n    if (config.facebookDisplayName) {\n      infoPlist.FacebookDisplayName = config.facebookDisplayName;\n    } else {\n      delete infoPlist['FacebookDisplayName'];\n    }\n\n    // set ITSAppUsesNonExemptEncryption to let people skip manually\n    // entering it in iTunes Connect\n    if (\n      privateConfig &&\n      privateConfig.hasOwnProperty('usesNonExemptEncryption') &&\n      privateConfig.usesNonExemptEncryption === false\n    ) {\n      infoPlist.ITSAppUsesNonExemptEncryption = false;\n    }\n\n    // google maps api key\n    if (privateConfig && privateConfig.googleMapsApiKey) {\n      infoPlist.GMSApiKey = privateConfig.googleMapsApiKey;\n    }\n\n    // use version from manifest\n    let version = config.version ? config.version : '0.0.0';\n    let buildNumber = config.ios && config.ios.buildNumber ? config.ios.buildNumber : '1';\n    infoPlist.CFBundleShortVersionString = version;\n    infoPlist.CFBundleVersion = buildNumber;\n\n    infoPlist.Fabric = {\n      APIKey:\n        (privateConfig && privateConfig.fabric && privateConfig.fabric.apiKey) ||\n        DEFAULT_FABRIC_KEY,\n      Kits: [\n        {\n          KitInfo: {},\n          KitName: 'Crashlytics',\n        },\n      ],\n    };\n\n    if (privateConfig && privateConfig.branch) {\n      infoPlist.branch_key = {\n        live: privateConfig.branch.apiKey,\n      };\n    }\n\n    let permissionsAppName = config.name ? config.name : 'this app';\n    for (let key in infoPlist) {\n      if (\n        infoPlist.hasOwnProperty(key) &&\n        _isAppleUsageDescriptionKey(key) &&\n        !usageDescriptionKeysConfigured.hasOwnProperty(key)\n      ) {\n        infoPlist[key] = infoPlist[key].replace('Expo experiences', permissionsAppName);\n      }\n    }\n\n    // 1 is iPhone, 2 is iPad\n    infoPlist.UIDeviceFamily = config.ios && config.ios.supportsTablet ? [1, 2] : [1];\n\n    // allow iPad-only\n    if (config.ios && config.ios.isTabletOnly) {\n      infoPlist.UIDeviceFamily = [2];\n    }\n\n    // Whether requires full screen on iPad\n    infoPlist.UIRequiresFullScreen = config.ios && config.ios.requireFullScreen;\n    if (infoPlist.UIRequiresFullScreen == null) {\n      // NOTES: This is defaulted to `true` for now to match the behavior prior to SDK 34, but will change to `false` in a future SDK version.\n      infoPlist.UIRequiresFullScreen = true;\n    }\n    // Cast to make sure that it is a boolean.\n    infoPlist.UIRequiresFullScreen = Boolean(infoPlist.UIRequiresFullScreen);\n\n    // context-specific plist changes\n    if (context.type === 'user') {\n      infoPlist = _configureInfoPlistForLocalDevelopment(infoPlist, context.data.exp);\n      _logDeveloperInfoForLocalDevelopment(infoPlist);\n    }\n\n    if (context.type === 'service') {\n      infoPlist.CFBundleExecutable = context.build.ios.bundleExecutable;\n    }\n\n    return infoPlist;\n  });\n  return result;\n}\n\n/**\n *  Configure EXShell.plist for a standalone app.\n */\nasync function _configureShellPlistAsync(context: StandaloneContext) {\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const config = context.config;\n  const buildPhaseLogger = logger.withFields({ buildPhase: 'configuring NSBundle' });\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n    // older SDK versions rely on `isShell` flag in xdl\n    if (parseSdkMajorVersion(config.sdkVersion) < 28) {\n      shellPlist.isShell = true;\n    }\n    shellPlist.manifestUrl = context.published.url;\n    shellPlist.releaseChannel = context.published.releaseChannel;\n    if (context.data.testEnvironment) {\n      shellPlist.testEnvironment = context.data.testEnvironment;\n    }\n    if (config.ios && config.ios.permissions) {\n      shellPlist.permissions = config.ios.permissions;\n    }\n    if (context.type === 'user') {\n      // disable manifest verification on detached apps until\n      // the developer adds the correct entitlements to their bundle id.\n      shellPlist.isManifestVerificationBypassed = true;\n    }\n    if (config.ios && config.ios.hasOwnProperty('isRemoteJSEnabled')) {\n      // deprecated, overridden by updates.enabled if that exists\n      shellPlist.areRemoteUpdatesEnabled = config.ios.isRemoteJSEnabled;\n    }\n    if (config.updates && config.updates.hasOwnProperty('enabled')) {\n      // enable/disable code push if the developer provided specific behavior\n      shellPlist.areRemoteUpdatesEnabled = config.updates.enabled;\n    }\n    if (!manifestUsesSplashApi(config, 'ios') && parseSdkMajorVersion(config.sdkVersion) < 28) {\n      // for people still using the old loading api, hide the native splash screen.\n      // we can remove this code eventually.\n      shellPlist.isSplashScreenDisabled = true;\n    }\n\n    buildPhaseLogger.info('Using standalone config:', shellPlist);\n    return shellPlist;\n  });\n}\n\nasync function _configureConstantsPlistAsync(context: StandaloneContext) {\n  if (context.type === 'user') {\n    return;\n  }\n\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    return constantsConfig;\n  });\n}\n\nasync function _configureGoogleServicesPlistAsync(context: StandaloneContext) {\n  if (context.type === 'user') {\n    return;\n  }\n  if (get(context, 'data.manifest.ios.googleServicesFile')) {\n    const { supportingDirectory } = IosWorkspace.getPaths(context);\n    await fs.writeFile(\n      path.join(supportingDirectory, 'GoogleService-Info.plist'),\n      get(context, 'data.manifest.ios.googleServicesFile'),\n      'base64'\n    );\n  }\n}\n\nasync function configureAsync(context: StandaloneContext) {\n  const buildPhaseLogger = logger.withFields({ buildPhase: 'configuring NSBundle' });\n\n  let {\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  } = IosWorkspace.getPaths(context);\n  if (!context.build.isExpoClientBuild() && !context.published.url) {\n    throw new Error(`Can't configure a NSBundle without a published url.`);\n  }\n\n  // ensure the intermediates directory is clean of any prior build's artifacts, in the event we\n  // share directories across builds\n  await fs.remove(intermediatesDirectory);\n\n  try {\n    // common configuration for all contexts\n    buildPhaseLogger.info(`Modifying NSBundle configuration at ${supportingDirectory}...`);\n    await _configureInfoPlistAsync(context);\n    if (!context.build.isExpoClientBuild()) {\n      await _configureShellPlistAsync(context);\n    }\n    await _configureEntitlementsAsync(context);\n    await _configureConstantsPlistAsync(context);\n    await _configureGoogleServicesPlistAsync(context);\n    if (!context.build.isExpoClientBuild()) {\n      await IosLaunchScreen.configureLaunchAssetsAsync(context, intermediatesDirectory);\n      await IosLocalization.writeLocalizationResourcesAsync({\n        supportingDirectory,\n        context,\n      });\n    }\n\n    if (context.build.isExpoClientBuild()) {\n      return;\n    }\n\n    if (context.type === 'user') {\n      const iconPath = path.join(\n        iosProjectDirectory,\n        projectName,\n        'Assets.xcassets',\n        'AppIcon.appiconset'\n      );\n      await IosIcons.createAndWriteIconsToPathAsync(context, iconPath);\n    } else if (context.type === 'service') {\n      buildPhaseLogger.info('Bundling assets...');\n      try {\n        await AssetBundle.bundleAsync(\n          context,\n          context.data.manifest.bundledAssets,\n          supportingDirectory,\n          context.data.manifest.sdkVersion === '24.0.0'\n        );\n      } catch (e) {\n        throw new Error(`Asset bundling failed: ${e}`);\n      }\n      buildPhaseLogger.info('Compiling resources...');\n      await IosAssetArchive.buildAssetArchiveAsync(\n        context,\n        supportingDirectory,\n        intermediatesDirectory\n      );\n      await _preloadManifestAndBundleAsync(\n        context.data.manifest,\n        supportingDirectory,\n        'shell-app-manifest.json',\n        'shell-app.bundle'\n      );\n    }\n\n    await _maybeLegacyPreloadKernelManifestAndBundleAsync(\n      context,\n      'kernel-manifest.json',\n      'kernel.ios.bundle'\n    );\n  } catch (err) {\n    console.error(err);\n    throw err;\n  } finally {\n    buildPhaseLogger.info('Cleaning up iOS...');\n    await Promise.all([\n      _cleanPropertyListBackupsAsync(context, supportingDirectory),\n      fs.remove(intermediatesDirectory),\n    ]);\n  }\n}\n\nexport { configureAsync };\n"],"sourceRoot":"/@expo/xdl@56.2.1/src"}