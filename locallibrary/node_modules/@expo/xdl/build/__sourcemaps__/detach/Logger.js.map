{"version":3,"sources":["detach/Logger.ts"],"names":["LogLevel","Logger","constructor","bunyanGetter","extraFields","loggerObj","bunyan","createLogger","name","loggerGetter","configure","withFields","getter","trace","all","logLine","debug","info","warn","error","fatal","level","args","argsToLog","extraFieldsFromArgsExist","_","isPlainObject","first","extraFieldsFromArgs","shift","isEmpty","unshift","LoggerDetach","pipeOutputToLogger","stdout","stderr","stdoutOnly","on","line","logMultiline","source","data","lines","String","split","forEach"],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\n\nimport bunyan from '@expo/bunyan';\nimport _ from 'lodash';\n\n\nexport enum LogLevel {\n  trace = 'trace',\n  debug = 'debug',\n  info = 'info',\n  warn = 'warn',\n  error = 'error',\n  fatal = 'fatal',\n}\n\ntype BunyanGetter = () => bunyan;\n\nexport class Logger {\n  loggerObj: bunyan;\n  loggerGetter?: BunyanGetter;\n  extraFields: any;\n\n  constructor(bunyanGetter?: BunyanGetter, extraFields?: any) {\n    this.loggerObj = bunyan.createLogger({ name: 'xdl-detach' });\n    this.loggerGetter = bunyanGetter;\n    this.extraFields = extraFields;\n  }\n\n  configure(loggerObj: bunyan) {\n    this.loggerObj = loggerObj;\n  }\n\n  withFields(extraFields: any) {\n    const getter = this.loggerGetter || (() => this.loggerObj);\n    return new Logger(getter, { ...this.extraFields, ...extraFields });\n  }\n\n  trace(...all: any[]) {\n    this.logLine(LogLevel.trace, ...all);\n  }\n  debug(...all: any[]) {\n    this.logLine(LogLevel.debug, ...all);\n  }\n  info(...all: any[]) {\n    this.logLine(LogLevel.info, ...all);\n  }\n  warn(...all: any[]) {\n    this.logLine(LogLevel.warn, ...all);\n  }\n  error(...all: any[]) {\n    this.logLine(LogLevel.error, ...all);\n  }\n  fatal(...all: any[]) {\n    this.logLine(LogLevel.fatal, ...all);\n  }\n\n  logLine(level: LogLevel, ...args: any[]) {\n    const argsToLog = [...args];\n    const extraFieldsFromArgsExist = _.isPlainObject(_.first(args));\n    const extraFieldsFromArgs = extraFieldsFromArgsExist ? args[0] : {};\n    if (extraFieldsFromArgsExist) {\n      argsToLog.shift();\n    }\n    const extraFields = { ...extraFieldsFromArgs, ...this.extraFields };\n    if (!_.isEmpty(extraFields)) {\n      argsToLog.unshift(extraFields);\n    }\n\n    if (this.loggerGetter) {\n      const loggerObj = this.loggerGetter();\n      loggerObj[level](...argsToLog);\n    } else {\n      this.loggerObj[level](...argsToLog);\n    }\n  }\n}\n\nconst LoggerDetach = new Logger();\nexport default LoggerDetach;\n\nexport function pipeOutputToLogger(\n  { stdout, stderr }: { stdout?: Readable | null; stderr?: Readable | null } = {\n    stdout: null,\n    stderr: null,\n  },\n  extraFields = {},\n  { stdoutOnly = false } = {}\n) {\n  if (stdout) {\n    stdout.on('data', line => logMultiline(line, { ...extraFields, source: 'stdout' }));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', line => logMultiline(line, { ...extraFields, source }));\n  }\n}\n\nfunction logMultiline(data: any, extraFields: any) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    if (line) {\n      const args = [line];\n      if (!_.isEmpty(extraFields)) {\n        args.unshift(extraFields);\n      }\n      LoggerDetach.info(...args);\n    }\n  });\n}\n"],"file":"../../detach/Logger.js","sourceRoot":"/@expo/xdl@56.2.1/src"}