{"version":3,"sources":["project/Doctor.js"],"names":["NO_ISSUES","WARNING","ERROR","FATAL","MIN_WATCHMAN_VERSION","MIN_NPM_VERSION","CORRECT_NPM_VERSION","WARN_NPM_VERSION_RANGES","BAD_NPM_VERSION_RANGES","_isNpmVersionWithinRanges","npmVersion","ranges","_","some","range","semver","satisfies","async","_checkNpmVersionAsync","projectRoot","let","yarnVersionResponse","await","spawnAsync","status","e","npmVersionResponse","trim","stdout","lt","ProjectUtils","logError","logWarning","clearNotification","_checkWatchmanVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","warningMessage","process","platform","validateWithSchemaFileAsync","schemaPath","exp","readConfigJsonAsync","schema","JSON","parse","fs","readFile","validateWithSchema","configName","sdkVersion","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","Schemer","rootDir","validateSchemaAsync","SchemerError","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","validationError","fieldPath","message","_validateExpJsonAsync","pkg","allowNetwork","expJsonExists","ConfigUtils","fileExistsAsync","path","appJsonExists","configFilenameAsync","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","ExpSchema","getSchemaAsync","sdkVersions","Versions","sdkVersionsAsync","keys","reactNativeIssue","_validateReactNativeVersionAsync","validation","reactNativeVersionWarnings","reactNative","dependencies","isDetached","test","reactNativeTag","match","sdkVersionObject","major","parseSdkVersionFromTag","_validateNodeModulesAsync","nodeModulesPath","resolve","result","statSync","isDirectory","resolveModule","code","validateLowLatencyAsync","validateAsync","validateWithNetworkAsync","hasWebSupportAsync","inputExp","platforms","Array","isArray","isWebConfigured","includes","getWebSetupLogs","appJsonRules","chalk","green","bold","red","validateWebSupportAsync","isInteractive","isTTY","validateWebPlatformAddedAsync","boolean","hasWebSupport","promptToAddWebPlatform","addPlatform","XDLError","promptAsync","question","type","name","default","should","inquirer","prompt","underline","getenv","boolish","expStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_INSTALLED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","sdkPkg","mainFilePath","main","mainFile"],"mappings":"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","file":"../../project/Doctor.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport * as ConfigUtils from '@expo/config';\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport Schemer, { SchemerError } from '@expo/schemer';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport * as AssetUtils from '../AssetUtils';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\nimport XDLError from '../XDLError';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = 'latest';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0 < 5.7.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion, ranges) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot) {\n  try {\n    try {\n      let yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend the latest version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile(schemaPath, 'utf8'));\n  return validateWithSchema(projectRoot, exp, schema.schema, 'exp.json', 'UNVERSIONED', true);\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: ?string, assetsErrorMessage: ?string }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  let validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${\n        e.errors.length > 1 ? 's' : ''\n      } validating fields in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/workflow/configuration/`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${\n          e.errors.length > 1 ? '' : 's'\n        } validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError) {\n  return `\\n • ${validationError.fieldPath ? 'Field: ' + validationError.fieldPath + ' - ' : ''}${\n    validationError.message\n  }.`;\n}\n\nasync function _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const expJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'exp.json'));\n  const appJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'app.json'));\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n\n  // Skip validation if the correct token is set in env\n  if (!(sdkVersion === 'UNVERSIONED' && process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN)) {\n    try {\n      let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      let { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        sdkVersion,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  let sdkVersions = await Versions.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!sdkVersions[sdkVersion]) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp,\n  pkg,\n  projectRoot,\n  sdkVersions,\n  sdkVersion\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies ? pkg.dependencies['react-native'] : null;\n\n    // react-native is required\n    if (!reactNative) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: Can't find react-native in package.json dependencies`,\n        'doctor-no-react-native-in-package-json'\n      );\n      return ERROR;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n    if (!exp.isDetached) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n    }\n\n    // Expo fork of react-native is required\n    if (!/expo\\/react-native/.test(reactNative)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${\n            sdkVersionObject['expoReactNativeTag']\n          }`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _validateNodeModulesAsync(projectRoot): Promise<number> {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React Native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    } else {\n      throw e;\n    }\n  }\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nexport async function hasWebSupportAsync(projectRoot, exp) {\n  let inputExp = exp;\n  if (!exp) {\n    inputExp = (await ProjectUtils.readConfigJsonAsync(projectRoot)).exp;\n  }\n  const { platforms } = inputExp;\n  if (!Array.isArray(platforms)) {\n    return false;\n  }\n\n  const isWebConfigured = platforms.includes('web');\n  return isWebConfigured;\n}\n\nfunction getWebSetupLogs(): string {\n  const appJsonRules = chalk.green(`\n  {\n    \"platforms\": [\n  ${chalk.green.bold(`+      \"web\"`)}\n    ]\n  }`);\n  return `${chalk.red(\n    `* Add \"web\" to the \"platforms\" array in your project's ${chalk.bold(`app.json`)}`\n  )} ${appJsonRules}`;\n}\n\nexport async function validateWebSupportAsync(projectRoot) {\n  const isInteractive = process.stdout.isTTY;\n\n  await validateWebPlatformAddedAsync(projectRoot, isInteractive);\n\n  // TODO: Bacon: Add package validation\n}\n\nexport async function validateWebPlatformAddedAsync(\n  projectRoot: string,\n  isInteractive: boolean = true\n): Promise<void> {\n  const hasWebSupport = await hasWebSupportAsync(projectRoot);\n  if (hasWebSupport) {\n    return true;\n  }\n\n  if (isInteractive && (await promptToAddWebPlatform())) {\n    await ConfigUtils.addPlatform(projectRoot, 'web');\n    return true;\n  }\n  throw new XDLError('WEB_NOT_CONFIGURED', getWebSetupLogs());\n}\n\nasync function promptAsync(message: string): Promise<boolean> {\n  const question = {\n    type: 'confirm',\n    name: 'should',\n    message,\n    default: true,\n  };\n  const { should } = await inquirer.prompt(question);\n  return should;\n}\n\nasync function promptToAddWebPlatform(): Promise<boolean> {\n  return await promptAsync(\n    `It appears you don't explicitly define \"${chalk.green.underline(\n      `web`\n    )}\" as one of the supported \"${chalk.green.underline(\n      `platforms`\n    )}\" in your project's ${chalk.green(`app.json`)}. \\n  Would you like to add it?`\n  );\n}\n\nasync function validateAsync(projectRoot: string, allowNetwork: boolean): Promise<number> {\n  if (getenv.boolish('EXPO_NO_DOCTOR', false)) {\n    return NO_ISSUES;\n  }\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork);\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  status = Math.max(status, expStatus);\n\n  if (exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\ntype ExpoSdkStatus = 0 | 1 | 2;\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<ExpoSdkStatus> {\n  let { pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from '${sdkPkg}'`) || mainFile.includes(`require('${sdkPkg}')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"sourceRoot":"/@expo/xdl@56.2.1/src"}